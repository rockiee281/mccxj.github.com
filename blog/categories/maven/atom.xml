<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-10-29T22:01:31+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[迷你Maven]]></title>
    <link href="http://mccxj.github.com/blog/20130206_mini-maven.html"/>
    <updated>2013-02-06T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/mini-maven</id>
    <content type="html"><![CDATA[<h2><strong>根据<a href="http://www.juvenxu.com/mvn-def-guide/">Maven权威指南</a>编制的思维导图</strong></h2>

<h2>可以在Dropbox上下载到这个<a href="https://www.dropbox.com/s/mjn0efcr9n6ly97/%E8%BF%B7%E4%BD%A0Maven.xmind">xmind文件</a></h2>

<p><img src="/assets/images/2013/maven.png" alt="迷你Maven" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven学习要点(旧)]]></title>
    <link href="http://mccxj.github.com/blog/20121130_maven-quickstart.html"/>
    <updated>2012-11-30T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/maven-quickstart</id>
    <content type="html"><![CDATA[<p>我感觉maven这东西比ant容易上手(ant每个项目规则都不一样),看那个100页的迷你书+例子(推荐basecrm或spring3.0)基本就ok了~~
哎，本来想写的很多，发现写出来的却很少。多多包涵!</p>

<ul>
<li>maven是一个项目管理工具，跟ant相比亮点在于它遵守了COC规则，只要遵守就好处多多</li>
<li>maven可以分为三部分:maven本身(提供基本功能),仓库(提供jar),maven插件(提供更多的集成功能)</li>
<li>maven的配置文件是settings.xml,maven项目的配置文件是pom.xml</li>
<li><p>settings.xml主要是配置仓库镜像,本地仓库,网络访问设置等信息,常用配置:
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;localRepository&gt;</span>D:/repository<span class="nt">&lt;/localRepository&gt;</span> --本地仓库
 <span class="nt">&lt;proxy&gt;</span>  --网络代理
   <span class="nt">&lt;id&gt;</span>optional<span class="nt">&lt;/id&gt;</span>
   <span class="nt">&lt;active&gt;</span>true<span class="nt">&lt;/active&gt;</span>
   <span class="nt">&lt;protocol&gt;</span>http<span class="nt">&lt;/protocol&gt;</span>
   <span class="nt">&lt;username&gt;</span>proxyuser<span class="nt">&lt;/username&gt;</span>
   <span class="nt">&lt;password&gt;</span>proxypass<span class="nt">&lt;/password&gt;</span>
   <span class="nt">&lt;host&gt;</span>proxy.host.net<span class="nt">&lt;/host&gt;</span>
   <span class="nt">&lt;port&gt;</span>80<span class="nt">&lt;/port&gt;</span>
   <span class="nt">&lt;nonProxyHosts&gt;</span>local.net|some.host.com<span class="nt">&lt;/nonProxyHosts&gt;</span>
 <span class="nt">&lt;/proxy&gt;</span>
<span class="nt">&lt;mirror&gt;</span>  --仓库镜像
  <span class="nt">&lt;id&gt;</span>nexus<span class="nt">&lt;/id&gt;</span>
  <span class="nt">&lt;mirrorOf&gt;</span>*<span class="nt">&lt;/mirrorOf&gt;</span>
  <span class="nt">&lt;name&gt;</span>Mirror for maven central.<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;url&gt;</span>http://10.137.27.223:8080/nexus/content/groups/public<span class="nt">&lt;/url&gt;</span>
<span class="nt">&lt;/mirror&gt;</span>
</code></pre></div></p></li>
<li><p>pom.xml主要分为三部分:项目本身的信息,使用的插件,依赖的jar</p></li>
<li><p>项目本身的信息,用于唯一标识(groupid-artifactId-version, 通常是这3部分)，例如
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span> --maven3.x都是使用4.0.0
<span class="nt">&lt;groupId&gt;</span>com.huawei.boss<span class="nt">&lt;/groupId&gt;</span>
<span class="nt">&lt;artifactId&gt;</span>boss-common<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</code></pre></div>
类似这个，默认就会被打包成boss-common-0.0.1-SNAPSHOT.jar。同样，项目的依赖库也是通过这种坐标在仓库中寻找的。</p></li>
<li><p>artifactId通常推荐使用项目名当前缀,当项目是打包成war的时候,通常需要制定发布后的命名:
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;build&gt;</span>
 <span class="nt">&lt;finalName&gt;</span>bossbase<span class="nt">&lt;/finalName&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div></p></li>
<li>可以通过properties定义一些常量,并通过${spring.version}之类来引用
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;properties&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span> <span class="ni">&amp;lt;</span>project.build.sourceEncoding<span class="ni">&amp;gt;</span>UTF-8<span class="ni">&amp;lt;</span>/project.build.sourceEncoding<span class="ni">&amp;gt;</span>
 <span class="ni">&amp;lt;</span>spring.version<span class="ni">&amp;gt;</span>2.5.6<span class="ni">&amp;lt;</span>/spring.version<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;p&gt;&lt;/properties&gt;</span>
</code></pre></div></p></li>
<li><p>jar包依赖常用的有如下配置(仅举例说明):
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;dependencies&gt;</span>
   <span class="nt">&lt;dependency&gt;&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span>     <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.springframework<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
         <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>spring-core<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
       <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>${spring.version}<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>  --常量引用,在引用同个项目多个模块的时候相当有效
     <span class="ni">&amp;lt;</span>type<span class="ni">&amp;gt;</span>jar<span class="ni">&amp;lt;</span>/type<span class="ni">&amp;gt;</span>  --默认就是jar
       <span class="ni">&amp;lt;</span>scope<span class="ni">&amp;gt;</span>compile<span class="ni">&amp;lt;</span>/scope<span class="ni">&amp;gt;</span>  --默认是compile,表示对编译,测试,运行都有效
 <span class="ni">&amp;lt;</span>/dependency<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

  <span class="nt">&lt;dependency&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span>    <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>geronimo-spec<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>geronimo-spec-jta<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span> --这个是为了不依赖sun的专用东东
     <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>1.0.1B-rc4<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
          <span class="ni">&amp;lt;</span>type<span class="ni">&amp;gt;</span>pom<span class="ni">&amp;lt;</span>/type<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>scope<span class="ni">&amp;gt;</span>provided<span class="ni">&amp;lt;</span>/scope<span class="ni">&amp;gt;</span>  --在运行的时候不依赖，我们常见的时候j2ee规范之类的api,如servlet-api
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span> <span class="ni">&amp;lt;</span>dependency<span class="ni">&amp;gt;</span>
       <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>junit<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
         <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>junit<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
     <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>4.8.2<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
       <span class="ni">&amp;lt;</span>type<span class="ni">&amp;gt;</span>jar<span class="ni">&amp;lt;</span>/type<span class="ni">&amp;gt;</span>
         <span class="ni">&amp;lt;</span>scope<span class="ni">&amp;gt;</span>test<span class="ni">&amp;lt;</span>/scope<span class="ni">&amp;gt;</span>  --只在测试的时候生效,另外还有个ruuntime的scope,用于运行时依赖(如jdbc驱动等)
<span class="ni">&amp;lt;</span>/dependency<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

 <span class="nt">&lt;dependency&gt;</span>
   <span class="nt">&lt;groupId&gt;</span>org.hibernate<span class="nt">&lt;/groupId&gt;</span>
   <span class="nt">&lt;artifactId&gt;</span>hibernate<span class="nt">&lt;/artifactId&gt;</span>
   <span class="nt">&lt;version&gt;</span>3.2.5.ga<span class="nt">&lt;/version&gt;</span>
   <span class="nt">&lt;exclusions&gt;</span>  --这里是排除依赖，因为jta官方版是在maven仓库中找不到的

<span class="nt">&lt;pre&gt;&lt;code&gt;</span> <span class="ni">&amp;lt;</span>exclusion<span class="ni">&amp;gt;</span>
   <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>javax.transaction<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
   <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>jta<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
 <span class="ni">&amp;lt;</span>/exclusion<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;p&gt;</span>   <span class="nt">&lt;/exclusions&gt;</span>
 <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></p></li>
<li><p>当项目是分模块进行的时候,通常会考虑使用modules,如:
<div class="highlight"><pre><code class="xml"> <span class="nt">&lt;modules&gt;&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span> <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>basecrm-parent<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
 <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>common<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
 <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>systemmgr<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
 <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>prodmgr<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;p&gt;</span> <span class="nt">&lt;/modules&gt;</span>
</code></pre></div>
这个时候至少会有两级pom.xml,这样像properties,dependency等都是可以继承的(可参考basecrm项目或者spring3.x)</p></li>
<li><p>plugin资源非常多，简单举几个常用插件(配置请上网找)<br/>
maven-compiler-plugin 主要是配置编译方面的选项(例如使用什么版本的jdk)<br/>
maven-surefire-plugin 跟测试有关的,例如配置测试失败是否继续,是否跳过测试等<br/>
build-helper-maven-plugin 用于配置项目的目录结构,例如配置多个源代码目录等<br/>
maven-shade-plugin 我只知道可以用来给打包加点料~~<br/>
tomcat-maven-plugin 顾名思义,用于集成tomcat<br/>
maven-jetty-plugin 顾名思义,用于集成jetty</p></li>
<li><p>others <br/>
maven仓库代理推荐nexus(网内已经有个现成的:http://10.137.27.223:8080/nexus)<br/>
eclipse中的maven插件推荐m2eclipse(update-site: http://m2eclipse.sonatype.org/sites/m2e)<br/>
maven实战迷你书(http://www.infoq.com/cn/minibooks/maven-in-action)</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
