<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: alias | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/alias/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2014-01-19T16:40:57+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jekyll插件:支持URL跳转]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-alias-generator.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-alias-generator</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/jekyll-alias-generator.png" alt="jekyll插件:支持URL跳转" /></p>

<p>github page不支持.htaccess功能(参考<a href="http://rawsyntax.com/blog/blogging-on-jekyll-url-redirects/">Blogging on Jekyll: URL Redirects</a>)，
所以发生URL调整的时候，无法让原有路径自动跳转到新路径。
<a href="http://github.com/tsmango/jekyll_alias_generator">Alias generator</a>这个插件提供了一个解决方案，就是生成多一个页面，采用auto refresh的方式跳转到新路径。</p>

<p>这次我也调整了一些博客的路径，我也采用了这个方式。不过我只对当前已有的页面生成一次，以后的就不用这个插件了。
另外，我不想去修改每个页面的alias标签，所以我调整了代码，只对我的url规则进行处理。下面是我使用的版本。</p>

<p><div><script src='https://gist.github.com/4645990.js?file=alias_generator.rb'></script>
<noscript><pre><code># Alias Generator for Posts.
#
# Example:
#   alias /20121010_hello.html to /blog/20121010_hello.html
#   alias /hello.html to /pages/20121010_hello.html
#
# Place the full path of the alias (place to redirect from) inside the
# destination post's YAML Front Matter. One or more aliases may be given.
#
# Forked from Thomas Mango 's jekyll_alias_generator
# At http://github.com/tsmango/jekyll_alias_generator
# PLugin License: MIT

module Jekyll

  class AliasGenerator &lt; Generator

    def generate(site)
      @site = site

      process_posts
      process_pages
    end

    def process_posts
      # alias /20121010_hello.html to /blog/20121010_hello.html
      @site.posts.each do |post|
        generate_aliases(post.url, &quot;\/#{$1}&quot;) if /^\/blog\/(.+)$/ =~ post.url
      end
    end

    def process_pages
      # alias /hello.html to /pages/20121010_hello.html
      @site.pages.each do |page|
        dest = page.destination('')
        generate_aliases(dest, &quot;\/#{$1}&quot;)  if /^\/pages\/(.+)$/ =~ dest
      end
    end

    def generate_aliases(destination_path, aliases)
      alias_paths ||= Array.new
      alias_paths &lt;&lt; aliases
      alias_paths.compact!

      alias_paths.flatten.each do |alias_path|
        alias_path = alias_path.to_s

        alias_dir  = File.extname(alias_path).empty? ? alias_path : File.dirname(alias_path)
        alias_file = File.extname(alias_path).empty? ? &quot;index.html&quot; : File.basename(alias_path)
        fs_path_to_dir   = File.join(@site.dest, alias_dir)
        alias_index_path = File.join(alias_dir, alias_file)

        FileUtils.mkdir_p(fs_path_to_dir)

        File.open(File.join(fs_path_to_dir, alias_file), 'w') do |file|
          file.write(alias_template(destination_path))
        end

        (alias_index_path.split('/').size + 1).times do |sections|
          @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_index_path.split('/')[0, sections].join('/'), nil)
        end
      end
    end

    def alias_template(destination_path)
      &lt;&lt;-EOF
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
      &lt;head&gt;
      &lt;link rel=&quot;canonical&quot; href=&quot;#{destination_path}&quot;/&gt;
      &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=#{destination_path}&quot; /&gt;
      &lt;/head&gt;
      &lt;/html&gt;
      EOF
    end
  end

  class AliasFile &lt; StaticFile
    require 'set'

    def destination(dest)
      File.join(dest, @dir)
    end

    def modified?
      return false
    end

    def write(dest)
      return true
    end
  end
end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
