<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redis | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2014-03-05T22:23:25+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis简报]]></title>
    <link href="http://mccxj.github.com/blog/20130908_redis-introduction.html"/>
    <updated>2013-09-08T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/redis-introduction</id>
    <content type="html"><![CDATA[<p><strong>RE</strong>mote <strong>DI</strong>ctionary <strong>S</strong>erver(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统，
与memcached相比，redis支持更丰富的数据结构，特点是高性能、持久存储，适应高并发的应用场景。它起步较晚，发展迅速，
目前已被许多大型机构采用，比如Twitter、Github、新浪微博等。</p>

<h2>Redis安装</h2>

<p>redis的安装没有其他依赖，非常简单。操作如下：</p>

<p><code>bash
wget http://download.redis.io/releases/redis-2.6.16.tar.gz
tar zxvf redis-2.6.16.tar.gz
cd redis-2.6.16/
make
</code></p>

<p>这样就会在src目录下生成以下几个可执行文件：redis-benchmark、redis-check-aof、redis-check-dump、redis-cli、redis-server。
这几个文件加上redis.conf就是redis的最终可用包了。可以考虑把这几个文件拷贝到你希望的地方。例如:</p>

<p><code>bash
mkdir -p /usr/local/redis/bin
mkdir -p /usr/local/redis/etc
cp redis.conf /usr/local/redis/etc
cd src
cp redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server /usr/local/redis/bin
</code></p>

<p>现在就可以启动redis了。</p>

<p><code>bash
cd /usr/local/redis
bin/redis-server etc/redis.conf
</code></p>

<p>注意，默认复制过去的redis.conf文件的daemonize参数为no，所以redis不会在后台运行，可以修改为yes则为后台运行redis。
另外配置文件中规定了pid文件，log文件和数据文件的地址，如果有需要先修改，默认log信息定向到stdout.
这时候就可以打开终端进行测试了，默认的监听端口是6379，所以用telnet进行连接如下：</p>

<p>```bash</p>

<h1>telnet localhost 6379</h1>

<p>Trying 127.0.0.1...
Connected to localhost.
Escape character is '<sup>]'.</sup>
SET hello world
+OK
GET hello
$5
world
quit
+OK
Connection closed by foreign host.
```</p>

<p>或者使用redis-cli客户端:</p>

<p>```bash</p>

<h1>redis-cli</h1>

<p>redis 127.0.0.1:6379> SET hello world
OK
redis 127.0.0.1:6379> GET hello
"world"
```</p>

<h2>redis数据结构</h2>

<p>redis相对memcached来说，支持更加丰富的数据结构，正如作者所说的，redis是一个数据结构服务器（data structures server），
redis的所有功能就是将数据以其固有的几种结构保存，并提供给用户操作这几种结构的接口。redis目前支持以下几种数据类型：</p>

<ul>
<li>String类型</li>
</ul>


<p>字符串是最简单的类型，和memcached支持的类型是一样的，但是在功能上更加丰富。</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SET name "Redis 2.6.16"
OK
redis 127.0.0.1:6379&gt; GET name
"Redis 2.6.16"
</code></p>

<p>另外，它还支持批量读写:</p>

<p><code>bash
redis 127.0.0.1:6379&gt; MSET age 30 sex Male
OK
redis 127.0.0.1:6379&gt; MGET age sex
1) "30"
2) "Male"
</code></p>

<p>还可以当成数字来使用，并支持对数字的加减操作:</p>

<p><code>bash
redis 127.0.0.1:6379&gt; INCR age
(integer) 31
redis 127.0.0.1:6379&gt; INCRBY age 2
(integer) 33
redis 127.0.0.1:6379&gt; GET age
"33"
redis 127.0.0.1:6379&gt; DECR age
(integer) 32
redis 127.0.0.1:6379&gt; DECRBY age 2
(integer) 30
redis 127.0.0.1:6379&gt; GET age
"30"
</code></p>

<p>还支持对字符串进行部分修改或获取操作</p>

<p><code>bash
redis 127.0.0.1:6379&gt; STRLEN name
(integer) 12
redis 127.0.0.1:6379&gt; GETRANGE name 0 4
"Redis"
redis 127.0.0.1:6379&gt; APPEND name ", NoSQL"
(integer) 19
redis 127.0.0.1:6379&gt; GET name
"Redis 2.6.16, NoSQL"
</code></p>

<ul>
<li>List类型</li>
</ul>


<p>Redis能够把数据存储成一个链表，并能对这个链表进行操作:</p>

<p><code>bash
redis 127.0.0.1:6379&gt; LPUSH language Java
(integer) 1
redis 127.0.0.1:6379&gt; LPUSH language C++
(integer) 2
redis 127.0.0.1:6379&gt; RPUSH language C
(integer) 3
redis 127.0.0.1:6379&gt; LLEN language
(integer) 3
redis 127.0.0.1:6379&gt; LRANGE language 0 2
1) "C++"
2) "Java"
3) "C"
redis 127.0.0.1:6379&gt; LPOP language
"C++"
redis 127.0.0.1:6379&gt; LLEN language
(integer) 2
redis 127.0.0.1:6379&gt; LREM language 1 Java
(integer) 1
redis 127.0.0.1:6379&gt; LLEN language
(integer) 1
</code></p>

<p>Redis也支持很多修改操作</p>

<p><code>bash
redis 127.0.0.1:6379&gt; LRANGE language 0 2
1) "C"
redis 127.0.0.1:6379&gt; LINSERT language BEFORE C C++
(integer) 2
redis 127.0.0.1:6379&gt; LINSERT language BEFORE C Java
(integer) 3
redis 127.0.0.1:6379&gt; LLEN language
(integer) 3
redis 127.0.0.1:6379&gt; LRANGE language 0 2
1) "C++"
2) "Java"
3) "C"
redis 127.0.0.1:6379&gt; LTRIM language 2 -1
OK
redis 127.0.0.1:6379&gt; LLEN language
(integer) 1
redis 127.0.0.1:6379&gt; LRANGE language 0 2
1) "C"
</code></p>

<ul>
<li>Sets类型</li>
</ul>


<p>Redis能够将一系列不重复的值存储成一个集合，并支持修改和集合关系操作。</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SADD system Win
(integer) 1
redis 127.0.0.1:6379&gt; SADD system Linux
(integer) 1
redis 127.0.0.1:6379&gt; SADD system Mac
(integer) 1
redis 127.0.0.1:6379&gt; SADD system Linux
(integer) 0
redis 127.0.0.1:6379&gt; SMEMBERS system
1) "Win"
2) "Mac"
3) "Linux"
</code></p>

<p>Sets结构也支持相应的修改操作</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SREM system Win
(integer) 1
redis 127.0.0.1:6379&gt; SMEMBERS system
1) "Mac"
2) "Linux"
redis 127.0.0.1:6379&gt; SADD system Win
(integer) 1
redis 127.0.0.1:6379&gt; SMEMBERS system
1) "Mac"
2) "Win"
3) "Linux"
</code></p>

<p>Redis还支持对集合的子交并补等操作</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SADD phone Android
(integer) 1
redis 127.0.0.1:6379&gt; SADD phone Iphone
(integer) 1
redis 127.0.0.1:6379&gt; SADD phone Win
(integer) 1
redis 127.0.0.1:6379&gt; SMEMBERS phone
1) "Win"
2) "Iphone"
3) "Android"
redis 127.0.0.1:6379&gt; SINTER system phone
1) "Win"
redis 127.0.0.1:6379&gt; SUNION system phone
1) "Win"
2) "Iphone"
3) "Mac"
4) "Linux"
5) "Android"
redis 127.0.0.1:6379&gt; SDIFF system phone
1) "Mac"
2) "Linux"
</code></p>

<ul>
<li>Sorted Sets类型</li>
</ul>


<p>Sorted Sets和Sets结构非常相似，不同的是Sorted Sets中的数据会有一个score属性，并会在写入时就按这个score排好序。</p>

<p><code>bash
redis 127.0.0.1:6379&gt; ZADD days 0 mon
(integer) 1
redis 127.0.0.1:6379&gt; ZADD days 1 tue
(integer) 1
redis 127.0.0.1:6379&gt; ZADD days 2 wed
(integer) 1
redis 127.0.0.1:6379&gt; ZADD days 3 thu
(integer) 1
redis 127.0.0.1:6379&gt; ZADD days 4 fri
(integer) 1
redis 127.0.0.1:6379&gt; ZADD days 5 sat
(integer) 1
redis 127.0.0.1:6379&gt; ZADD days 6 sun
(integer) 1
redis 127.0.0.1:6379&gt; ZCARD days
(integer) 7
redis 127.0.0.1:6379&gt; ZRANGE days 0 6
1) "mon"
2) "tue"
3) "wed"
4) "thu"
5) "fri"
6) "sat"
7) "sun"
redis 127.0.0.1:6379&gt; ZSCORE days sat
"5"
redis 127.0.0.1:6379&gt; ZCOUNT days 3 6
(integer) 4
redis 127.0.0.1:6379&gt; ZRANGEBYSCORE days 3 6
1) "thu"
2) "fri"
3) "sat"
4) "sun"
</code></p>

<ul>
<li>Hash类型</li>
</ul>


<p>Redis能够存储多个键值对的数据</p>

<p><code>bash
redis 127.0.0.1:6379&gt; HMSET student name Tom age 12 sex Male
OK
redis 127.0.0.1:6379&gt; HKEYS student
1) "name"
2) "age"
3) "sex"
redis 127.0.0.1:6379&gt; HVALS student
1) "Tom"
2) "12"
3) "Male"
redis 127.0.0.1:6379&gt; HGETALL student
1) "name"
2) "Tom"
3) "age"
4) "12"
5) "sex"
6) "Male"
redis 127.0.0.1:6379&gt; HDEL student sex
(integer) 1
redis 127.0.0.1:6379&gt; HGETALL student
1) "name"
2) "Tom"
3) "age"
4) "12"
</code></p>

<p>Redis能够支持Hash的批量修改和获取</p>

<p><code>bash
redis 127.0.0.1:6379&gt; HMSET kid name Akshi age 2 sex Female
OK
redis 127.0.0.1:6379&gt; HMGET kid name age sex
1) "Akshi"
2) "2"
3) "Female"
</code></p>

<p>在这些数据结构的基础上，跟memcached一样，Redis也支持设置数据过期时间，并支持一些简单的组合型的命令。</p>

<p>设置数据过期时间</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SET name "John Doe"
OK
redis 127.0.0.1:6379&gt; EXISTS name
(integer) 1
redis 127.0.0.1:6379&gt; EXPIRE name 5
(integer) 1
</code></p>

<p>5秒后再查看</p>

<p><code>
redis 127.0.0.1:6379&gt; EXISTS name
(integer) 0
redis 127.0.0.1:6379&gt; GET name
(nil)
</code></p>

<p>简单的组合型的命令。通过MULTI和EXEC，将几个命令组合起来执行</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SET counter 0
OK
redis 127.0.0.1:6379&gt; MULTI
OK
redis 127.0.0.1:6379&gt; INCR counter
QUEUED
redis 127.0.0.1:6379&gt; INCR counter
QUEUED
redis 127.0.0.1:6379&gt; INCR counter
QUEUED
redis 127.0.0.1:6379&gt; EXEC
1) (integer) 1
2) (integer) 2
3) (integer) 3
redis 127.0.0.1:6379&gt; GET counter
"3"
</code></p>

<p>你还可以用DICARD命令来中断执行中的命令序列</p>

<p><code>bash
redis 127.0.0.1:6379&gt; SET newcounter 0
OK
redis 127.0.0.1:6379&gt; MULTI
OK
redis 127.0.0.1:6379&gt; INCR newcounter
QUEUED
redis 127.0.0.1:6379&gt; INCR newcounter
QUEUED
redis 127.0.0.1:6379&gt; INCR newcounter
QUEUED
redis 127.0.0.1:6379&gt; DISCARD
OK
redis 127.0.0.1:6379&gt; GET newcounter
"0"
</code></p>
]]></content>
  </entry>
  
</feed>
