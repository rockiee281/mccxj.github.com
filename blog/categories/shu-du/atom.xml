<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数独 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/shu-du/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-10-12T21:37:01+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数独(sudoku)游戏]]></title>
    <link href="http://mccxj.github.com/blog/20120710_sudoku.html"/>
    <updated>2012-07-10T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/sudoku</id>
    <content type="html"><![CDATA[<h3>数独游戏</h3>

<p>在9×9格的大九宫格中有9个3×3格的小九宫格，并提供17个以上的数字。
根据这些数字，利用逻辑和推理，在其它的空格上填入1到9的数字。
每个数字在每个小九宫格内只能出现一次，每个数字在每行、每列也只能出现一次。</p>

<h3>思路与数据结构</h3>

<p>使用回溯法来不断尝试就可以了，可以用一个二维数组来arr[9][9]表示整个数独，其中还没有填上的用0表示。
我们还需要有个方法来判断能否在[i,j]这个格子上填入某个值。
同样还需要一个变量来表示是否已经找到解。另外，我使用了mark(0~80)作为每个格子的序号，
深度搜索的时候就从0开始处理，直到mark=80的时候出现一个解。</p>

<h3>ruby代码示例</h3>

<p><div class="highlight"><pre><code class="ruby"><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;判断能否在[i,j]上填入val&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">is_ok?</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">val</span><span class="p">)</span>
  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;pre&gt;&lt;code&gt;return false if @arr[i][m] == val &amp;amp;&amp;amp; m!=j #判断行不重复</span>
<span class="sr">return false if @arr[m][j] == val &amp;amp;&amp;amp; m!=i #判断列不重复</span>
<span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>

<span class="sr">&lt;p&gt;  end</span>
<span class="sr">  (i-i%3..i-i%3+2).each do |m|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">j</span><span class="o">%</span><span class="mi">3</span><span class="o">.</span><span class="n">.j</span><span class="o">-</span><span class="n">j</span><span class="o">%</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="vi">@arr</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">]</span> <span class="o">==</span> <span class="n">val</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">i!</span><span class="o">=</span><span class="n">m</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">j!</span><span class="o">=</span><span class="n">n</span> <span class="c1">#判断小九宫格不重复</span>
<span class="k">end</span>
<span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
  <span class="kp">true</span>
<span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;用来输出数独&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">print</span><span class="p">;</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="nb">p</span> <span class="vi">@arr</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="p">};</span> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;用来表示是否找到解&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@ok</span> <span class="o">=</span> <span class="kp">false</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;处理序号为mark开始的格子&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">mark</span><span class="p">)</span>
  <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">mark</span><span class="o">/</span><span class="mi">9</span><span class="p">,</span> <span class="n">mark</span><span class="o">%</span><span class="mi">9</span>
  <span class="n">val</span> <span class="o">=</span> <span class="vi">@arr</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">]</span>
  <span class="c1"># 当前已经有初始值的情况</span>
  <span class="k">if</span> <span class="n">val</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;pre&gt;&lt;code&gt;mark == 80 ? @ok = true : walk(mark+1)</span>
<span class="sr">return</span>
<span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>

<span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># 没有初始值的情况</span>
  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;pre&gt;&lt;code&gt;if is_ok?(m, n, v)</span>
<span class="sr">  @arr[m][n] = v</span>
<span class="sr">  @ok = true and return if mark==80 # 找到一个解</span>
<span class="sr">  walk(mark+1) #填好值之后，继续深度搜索</span>
<span class="sr">  return if @ok</span>
<span class="sr">end</span>
<span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>

<span class="sr">&lt;p&gt;  end</span>
<span class="sr">  @arr[m][n]=0 # 都处理完，没有找到就恢复</span>
<span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">walk</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="vi">@ok</span> <span class="p">?</span> <span class="nb">print</span> <span class="p">:</span> <span class="p">(</span><span class="nb">p</span> <span class="s2">&quot;no solution&quot;</span><span class="p">)</span>
</code></pre></div></p>

<h3>回溯法的基本步骤：</h3>

<ol>
<li>a定义问题的解空间</li>
<li>a确定易于搜索的解空间结构</li>
<li>a以深度优先搜索的策略搜索解空间，并在搜索过程中用剪枝函数避免无效搜索</li>
</ol>


<h3>回溯法的基本结构</h3>

<p>我们考虑递归的方式(比较容易理解)，递推的以后再讨论。
<div class="highlight"><pre><code class="ruby"><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;init&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1"># 标记是否找到解</span>
<span class="n">u</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># 已知解, 并假设(x1,x2....xn)为可选的解空间&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
  <span class="p">(</span><span class="n">x1</span><span class="o">.</span><span class="n">.xn</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;pre&gt;&lt;code&gt;if is_ok?(x, k) # 过滤无效的解</span>
<span class="sr">  u.add(x) # 把x加入已知解u</span>
<span class="sr">  backtrack(k+1) if u.is_part? # 部分解的情况，继续处理</span>
<span class="sr">  flag = true and exit if u.is_full? # 找到解并退出</span>
<span class="sr">  # fail的时候有可能需要对u进行恢复</span>
<span class="sr">end</span>
<span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>

<span class="sr">&lt;p&gt;  end</span>
<span class="sr">  # fail的时候有可能需要对u进行恢复</span>
<span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">backtrack</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># 从1开始搜索</span>
<span class="n">flag</span> <span class="p">?</span> <span class="nb">p</span> <span class="n">u</span> <span class="p">:</span> <span class="s2">&quot;no solution&quot;</span>
</code></pre></div></p>
]]></content>
  </entry>
  
</feed>
