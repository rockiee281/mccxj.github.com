<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 组合 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/zu-he/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-11-03T10:31:20+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[这些天,我们用到的算法]]></title>
    <link href="http://mccxj.github.com/blog/20130327_these-days-algorithms.html"/>
    <updated>2013-03-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/these-days-algorithms</id>
    <content type="html"><![CDATA[<p>平时做的应用，的确很少涉及非常具体的局部算法。不过最近一段时间还是遇到了一些，稍微整理一下，留个纪念。</p>

<h3>产品的组合生成</h3>

<p>举个例子，手机的颜色有黑白的，内存有16G,32G的，那么就有黑色16G,黑色32G，白色16G，黑色32G等组合项，
当然属性可能不止两项，想列出所有的组合项。</p>

<p>如果只有两种属性，很简单
``` java
for(属性 in 属性1)</p>

<pre><code>for(属性 in 属性2)
   // TODO 得到组合项
</code></pre>

<p>```</p>

<p>但是，如果有不定项的话，就不能这么写了。</p>

<p><strong>这需要知道点回溯法的技巧，我是用了非递归的方式编写的</strong>:</p>

<p>``` java</p>

<pre><code>public static List&lt;List&lt;String&gt;&gt; merge(List&lt;String&gt;... ls) {
    int len = ls.length;
    int[] pos = new int[len];//对i而言，表示第i种属性当前选择是哪个值
    Arrays.fill(pos, 0);
    String[] r = new String[len];//存放待生成的组合项

    List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;List&lt;String&gt;&gt;();
    int k = 0;//当前正在遍历第几种属性
    while (k &gt;= 0) {
        while (pos[k] &lt; ls[k].size()) {
            r[k] = ls[k].get(pos[k]);
            if (k == len - 1) {//是否已经是最后一个属性
                // 找到一个组合项，复制到res里边去
                pos[k] = pos[k] + 1;
            } else {
                k++;//当前位置的属性已经选择，处理下一种属性
            }
        }
        pos[k] = 0;
        k--;//当前位置的属性已经遍历完，需要回溯到上一种属性去
        if (k &gt; 0) {
            pos[k] = pos[k] + 1;
        }
    }
    return res;
}
</code></pre>

<p>```</p>

<p>说真的，即使加了注释，没有相关的算法基础，也是不容易看清楚的，所以有同事看到这个写法，在大呼救命。</p>

<h3>请求URL参数匹配</h3>

<p>最近有需求，要对请求里边的参数做匹配，规则是这样的：</p>

<p>例如有下面三条规则(其中问号表示变量，参数的顺序没关系):
* User=?&amp;Password=BB&amp;CurrentTab=LOG&amp;CurrentTab2=LOG
* User=?&amp;Password=?&amp;CurrentTab=LOG1
* User=?&amp;Password=?&amp;CurrentTab=LOG</p>

<p>如果请求参数是XX=222&amp;User=Q&amp;Password=BB&amp;CurrentTab=LOG，则只能匹配第三条，因为第一条多一个参数，第二条的值是LOG1，对应不上。<br/>
如果请求参数是User=QQ&amp;CurrentTab=LOG1&amp;Password=AA,同样只能匹配到第三条。</p>

<p>有个非常简单的思路，就是把参数拆开，然后一个个匹配。但是由于业务的请求数非常大，担心对系统是否有影响。</p>

<p>于是，弄了个测试原型，开50个线程的线程池，跑500个任务，每个任务跑1w次，匹配3个配置项。整个框架代码是这样的:
``` java</p>

<pre><code>public void work() throws Exception {

    final String match1 = "User=?&amp;Password=BB&amp;CurrentTab=LOG&amp;CurrentTab2=LOG";
    final String match2 = "User=?&amp;Password=?&amp;CurrentTab=LOG1";
    final String match3 = "User=?&amp;Password=?&amp;CurrentTab=LOG";

    ExecutorService pool = Executors.newFixedThreadPool(50);
    int tasksize = 500;
    final CountDownLatch latch = new CountDownLatch(tasksize);

    long s = System.nanoTime();
    for (int k = 0; k &lt; tasksize; k++) {
        pool.submit(new Runnable() {
            @Override
            public void run() {
                Random r = new Random(100000000);
                for (int i = 0; i &lt; 10000; i++) {
                    String toMatch = "XX="
                                     + r.nextInt()
                                     + "&amp;User=AA&amp;Password=BB&amp;CurrentTab=LOG";
                    // TODO 测试toMatch
                }
                latch.countDown();
            }
        });
    }

    latch.await();
    System.out.println(System.nanoTime() - s);
}
</code></pre>

<p>```</p>

<p>先用最简单的方法来做基准测试，有时候最简单的方法就可以满足要求了，粗略的代码如下:</p>

<p>``` java</p>

<pre><code>                    Map&lt;String, String&gt; matchs = new HashMap&lt;String, String&gt;();
                    String[] split = toMatch.split("&amp;");
                    for (String mss : split) {
                        String[] split2 = mss.split("=");
                        matchs.put(split2[0], split2[1]);
                    }
                    similar(match1, matchs);
                    similar(match2, matchs);
                    similar(match3, matchs);

                    ....

private boolean similar(String match, Map&lt;String, String&gt; matchs) {

    String[] ms = match.split("&amp;");
    for (String m : ms) {
        String[] split2 = m.split("=");
        if (!matchs.containsKey(split2[0]))
            return false;

        if (!"?".equals(split2[1])) {
            if (!split2[1].equals(matchs.get(split2[0])))
                return false;
        }
    }
    return true;
}                        
</code></pre>

<p>```</p>

<p>在我的机器上简单跑一下，大约要28s。这个算法非常暴力，用split和map结构搞定了。
如果用StringTokenizer的话，还能快些，我试了一下，把第一步split换了的话，大约需要25s.
<strong>我觉得这个效果也还是可以接受的。</strong></p>

<p>下面再用纯手工操作字符串的方式，代码如下:
``` java</p>

<pre><code>                    UrlMatcher matcher = new UrlMatcher(toMatch);
                    matcher.match(match1);
                    matcher.match(match2);
                    matcher.match(match3);

class UrlMatcher {
    private String toMatch;
    int[] pos = new int[20];
    int ps;

    public UrlMatcher(String toMatch) {
        int ss = 0;
        this.toMatch = toMatch;
        int len = toMatch.length();
        int st = 0;
        int ed = 0;
        for (int i = 0; i &lt; len; i++) {
            char c = toMatch.charAt(i);
            if (c == '=') {
                ed = i - 1;
                pos[ss++] = st;
                pos[ss++] = ed;
                st = i + 1;
                pos[ss++] = st;
            } else if (c == '&amp;') {
                pos[ss++] = i - 1;
                st = i + 1;
            }
        }
        pos[ss] = len - 1;
        ps = (ss + 1);
    }

    public boolean match(String m) {
        int len = m.length();
        int st = 0;
        int ed = 0;
        int vs = 0;
        int ve = 0;

        for (int i = 0; i &lt; len; i++) {
            char c = m.charAt(i);
            if (c == '=') {
                ed = i - 1;
                vs = i + 1;
            } else if (c == '&amp;') {
                ve = i - 1;

                if (!match2(m, st, ed, vs, ve)) {
                    return false;
                }

                st = i + 1;
            }
        }
        return match2(m, st, ed, vs, len - 1);
    }

    boolean match2(String m, int st, int ed, int vs, int ve) {
        boolean ma = true;
        for (int i = 0; i &lt; ps; i = i + 4) {
            if (pos[i + 1] - pos[i] == ed - st) {
                int sst = st - pos[i];
                for (int j = pos[i]; j &lt;= pos[i + 1]; j++) {
                    if (toMatch.charAt(j) != m.charAt(sst + j)) {
                        ma = false;
                    }
                }

                if (ma) {
                    if (ve == vs &amp;&amp; '?' == m.charAt(vs)) {
                        return true;
                    } else {
                        if (pos[i + 3] - pos[i + 2] == ve - vs) {
                            int vst = vs - pos[i + 2];
                            for (int j = pos[i + 2]; j &lt;= pos[i + 3]; j++) {
                                if (toMatch.charAt(j) != m.charAt(vst + j)) {
                                    return false;
                                }
                            }
                            return true;
                        } else {
                            return false;
                        }
                    }
                }

            }
        }
        return false;
    }
}                       
</code></pre>

<p>```</p>

<p>代码比较粗糙，对某些情况不是很严格，但不影响总体的性能评测，<strong>这个逻辑不到2s，要快15倍以上</strong>。
这个写法的特点是:<strong>使用数组而不是Map，使用标记位置而不是截取字符串，一次扫描。</strong></p>

<p><strong>不过，这个代码很粗糙，不要太当真。</strong></p>

<p>看看我机器上显示的虚拟机负载情况。</p>

<p>图1:最简单的做法
<img src="/assets/images/2013/match1.jpg" alt="简单方法+多线程" /></p>

<p>图2:手工打造，相对的内存消耗小些
<img src="/assets/images/2013/match2.jpg" alt="手工打造+多线程" /></p>

<p>图3:还是手工打造，不过单线程，相对来说CPU使用率就小很多了
<img src="/assets/images/2013/match3.jpg" alt="手工打造+单线程" /></p>

<h3>小结</h3>

<p>经常听到算法没什么用，算法没地方使用的论调，我也都一笑置之。
不过，<strong>我也承认，在现在的工作中，的确很少会直接面对非常具体的局部算法</strong>。
但我还是不能赞同上面的观点，<strong>毕竟有些场景还是不得不考虑的</strong>:</p>

<ol>
<li>做不到，没有算法的支持，根本不知怎么写好</li>
<li>做不好，简单的实现没法满足，需要高效的算法</li>
</ol>

]]></content>
  </entry>
  
</feed>
