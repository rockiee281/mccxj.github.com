<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术简报 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/ji-zhu-jian-bao/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2014-01-19T17:43:34+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[对RESTFul多了点理解]]></title>
    <link href="http://mccxj.github.com/blog/20130304_restful.html"/>
    <updated>2013-03-04T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/restful</id>
    <content type="html"><![CDATA[<h3>简报与REST</h3>

<p>上个月春节刚刚回来，就要交技术简报文章了。实在有点不知道写什么好，还好春节回去有准备些东西，不然就要悲剧了。
这次的主题选择的是REST。REST在国内外倒是很火热的主题了，不过在咱们公司里边很多人还是没接触过，完全没概念。
我觉得，这也的确是个不错的主题。</p>

<h3>主要内容</h3>

<p><img src="/assets/images/2013/restful.png" alt="RESTFul vs CURD" /></p>

<p>文章本身没什么特别，主要围绕资源来展开的，主要是给大家对REST,RESTFul等有点概念。
主要有这些部分:</p>

<ol>
<li>资源的名称与URI的关系，资源的概念很重要</li>
<li>获取资源的方式，主要是HTTP标准方法</li>
<li>资源的表述，如何表达资源的外在形式</li>
<li>资源的连通性，超媒体的概念一旦忽略就几乎等同于CRUD了</li>
<li>状态转移，区分应用状态和资源状态</li>
</ol>


<p>总体来看，在写这个文章的时候，对RESTFul多了点理解，主要是以前一些忽略的地方得到了加强。
整篇文章大概花了10页，主要以github API和ruby on rails作为例子。
<strong>个人认为，<a href="http://developer.github.com/">Github API</a>设计得是相当有参考意义的。</strong>值得参与RESTFul API设计的同行参考。</p>

<h3>推荐的书籍材料</h3>

<p>除了Github API,下面的一些材料也是我很喜欢的。特别是RESTful Web Services这本书，
里边的理论比较具有可操作性，并提出了面向资源的架构(ROA)，作为REST的实践方式，不妨学习一下。</p>

<ul>
<li><a href="http://www.redsaga.com/opendoc/REST_cn.pdf">架构风格与基于网络的软件架构设计</a></li>
<li><a href="http://book.douban.com/subject/3094230/">RESTful Web Services</a></li>
<li><a href="http://book.douban.com/subject/6837645/">RESTful Web Services Cookbook</a></li>
<li><a href="http://book.douban.com/subject/6937982/">REST API Design Rulebook</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
