<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 培训 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/pei-xun/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2014-01-19T16:40:57+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[迷你Maven]]></title>
    <link href="http://mccxj.github.com/blog/20130206_mini-maven.html"/>
    <updated>2013-02-06T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/mini-maven</id>
    <content type="html"><![CDATA[<h2><strong>根据<a href="http://www.juvenxu.com/mvn-def-guide/">Maven权威指南</a>编制的思维导图</strong></h2>

<h2>可以在Dropbox上下载到这个<a href="https://www.dropbox.com/s/mjn0efcr9n6ly97/%E8%BF%B7%E4%BD%A0Maven.xmind">xmind文件</a></h2>

<p><img src="/assets/images/2013/maven.png" alt="迷你Maven" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oracle执行计划思维导图]]></title>
    <link href="http://mccxj.github.com/blog/20121120_oracle-explain-plan.html"/>
    <updated>2012-11-20T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/oracle-explain-plan</id>
    <content type="html"><![CDATA[<h2><strong>这是为了oracle培训而编制的思维导图</strong></h2>

<h2>可以在Dropbox上下载到这个<a href="https://www.dropbox.com/s/8l53i0h3hphm5bz/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.xmind">xmind文件</a></h2>

<p><img src="/assets/images/explain_plan.png" alt="oracle执行计划思维导图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javacore入门介绍]]></title>
    <link href="http://mccxj.github.com/blog/20121111_javacore.html"/>
    <updated>2012-11-11T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/javacore</id>
    <content type="html"><![CDATA[<h2>什么是javacore</h2>

<ul>
<li>javacore是java应用程序在某个时间点的<strong>线程转储文件</strong>，通常也称为<strong>Thead Dump</strong></li>
<li>记录了整个JVM的运行情况(线程, 垃圾回收, JVM运行参数, 内存地址等信息)</li>
<li>用来诊断程序问题,其中比较典型的包括线程阻塞, CPU使用率过高, JVM Crash, 堆内存不足和类装载等问题</li>
</ul>


<h2>文件命名方式</h2>

<p>javacore文件通常以txt方式结尾,名称格式主要是以javacore开头, <strong>加上日期,产生的时间,当时的线程编号</strong>,如javacore.20100719.003424.299228.txt(<strong>Unix</strong>)</p>

<h2>javacore获取方式</h2>

<ul>
<li>发送中断signal<br/>
AIX和Linux: SIGQUIT, <strong>kill -3 PID</strong><br/>
Windows: Ctrl+Break, DrAdmin in WAS(未验证过)</li>
<li>在java的执行代码中使用JavaDump()方法(未验证过)<br/>
com.ibm.jvm.Dump.javaDump()方法促使JVM dump<br/>
发布ProblemDiagnosticsLabToolkit应用包,通过可视化页面直接生成相关文件</li>
<li>系统在异常时自动throw(<strong>程序不一定退出</strong>)<br/>
严重的本地调用出错<br/>
内存不足(例如 OutOfMemory)</li>
</ul>


<h2>javacore基本内容</h2>

<p><img src="/assets/images/javacore1.jpg" alt="javacore基本内容" /></p>

<ul>
<li>操作系统相关信息JDK版本信息<br/>
关注jdk的版本(1.5前后差别比较大),32位和64位在内存要求上也有区别</li>
<li>JVM的启动参数信息<br/>
关注一些特殊的虚拟机参数如xms,xmx,xss,java.ext.dirs等，特别是内存分配要和线程数匹配，避免xms太小(频繁gc和扩展)</li>
<li>JVM堆内存信息,已装载入的类信息<br/>
JIT Core Cache和JIT Data Cache是JIT编译器使用的，用于提高运行效率。一般关注Object(Reversed)(堆内存分配)和Class(用于类加载)的内存使用率</li>
<li>dump产生原因与时间<br/>
用于追溯当时的现状</li>
<li>GC记录<br/>
关注Full GC(Global GC)情况,通常伴随比较多的GC线程</li>
<li>所有Thread执行情况(包括应用程序内部执行线程,容器线程,垃圾回收线程,定时线程,线程池线程,页面请求转发线程等多种线程信息)</li>
</ul>


<h2>线程状态分类</h2>

<p><img src="/assets/images/javacore2.png" alt="线程状态分类" /></p>

<p>整个图包括三部分，左边是线程列表，选择某个线程后，中间会展示该线程与其他线程的等待依赖关系，右边会显示线程的详细堆栈信息。
通过在线程列表中对Name,State,Stack几列进行排序，可以对每类线程数量、是否有明显的瓶颈有个大概的印象，便于接下来的具体分析。</p>

<ul>
<li>死锁 Deadlock<br/>
多个线程竞争多个资源，出现相互等待资源又不释放资源的情况，这种情况在现实中并不多见。</li>
<li>执行中 Runnable<br/>
通常这类线程堆栈真处于发送数据，数值计算，类型转换等操作。</li>
<li>等待资源 Waiting on condition<br/>
等待资源，如果堆栈信息明确是应用代码，则证明该线程正在等待资源，一般是大量读取某资源，且该资源采用了资源锁的情况下，
线程进入等待状态，等待资源的读取。又或者，正在等待其他线程的执行等</li>
<li>等待监控器检查资源 Waiting on monitor</li>
<li>暂停 Suspended</li>
<li>对象等待中 Object.wait()</li>
<li>阻塞 Blocked<br/>
线程阻塞，是指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，
可以理解为等待资源超时的线程。这种情况在was的日志中，一般可以看到CPU饥渴，或者某线程已执行了XX秒的信息</li>
<li>停止 Parked</li>
</ul>


<h3>常见的线程分类</h3>

<table markdown="1" class="table">
  <tr><td>Thread开头</td><td>一般是应用自己起的后台线程，或者自己搞的线程池(没有重命名的时候),如果是独立进程大多业务都跑在这里</td></tr>
  <tr><td>WebContainer</td><td>was容器线程，was的话业务一般都在这里，受容器线程数量控制</td></tr>
  <tr><td>Timer</td><td>Timer定时任务，一些连接池等用于监控池内对象</td></tr>
  <tr><td>Quartz</td><td>Quartz用于定时任务的线程，不受容器控制</td></tr>
  <tr><td>Finalizer</td><td>用于实现finalize特殊方法的线程</td></tr>
  <tr><td>GC Slave</td><td>GC线程，频繁gc的时候会出现不少</td></tr>
  <tr><td>Main</td><td>主线程</td></tr>
  <tr><td>JIT</td><td>用于实现JIT的线程</td></tr>
</table>


<h2>相关工具与资料</h2>

<h2>策略分析</h2>

<ul>
<li>数百K的纯文本,最好借助工具,例如jca分析工具</li>
<li><strong>采集连续的多个时间点的javacore,方便对比(手动)</strong><br/>
一般的线程执行都会非常快，如果出现某个资源的阻塞，在短时间内的两个javacore，该线程的堆栈会变化不大。
或多次javacore的线程都集中在等待某些资源。</li>
<li>了解app的性质,基本处理流程</li>
<li>app相关的处理能力(以前的数据,用于对比)</li>
<li>问题出现时,多了解周边情况(cpu,io,外围),记录现状</li>
<li><strong>对thread状态进行分类,业务分布情况,资源等待情况(细化)</strong></li>
<li>如有必要,获取heapdump分析(oom)</li>
</ul>


<h2>javacore和heapdump的区别</h2>

<p>javacore经常和heapdump联系在一起，有时候也一起出现。这里简单对两个文件进行对比，希望大家有个印象：</p>

<table markdown="1" class="table">
  <tr><td></td><td>heapdump</td><td>javacore</td></tr>
  <tr><td>文件类型</td><td>二进制</td><td>文本</td></tr>
  <tr><td>分析工具</td><td>Heap Analyzer</td><td>jca</td></tr>
  <tr><td>文件内容</td><td>内存映射 对象占用信息</td><td>CPU执行信息,线程堆栈</td></tr>
  <tr><td>作用</td><td>分析内存泄漏 大对象</td><td>分析进程挂死,响应速度慢,大对象</td></tr>
  <tr><td>影响</td><td>对系统影响大,生成文件大,较少使用</td><td>对系统影响小,生成文件小,比较方便</td></tr>
</table>


<h2>相关工具与资料</h2>

<ul>
<li>javacore-tutorial.pdf 出自IBM的文档</li>
<li>jca  javacore分析工具</li>
<li>heap analyzer  heapdump分析工具</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reflection in java]]></title>
    <link href="http://mccxj.github.com/blog/20121017_reflection-in-java.html"/>
    <updated>2012-10-17T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/reflection-in-java</id>
    <content type="html"><![CDATA[<h2>什么是反射</h2>

<p>Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；
对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取信息以及动态调用
对象方法的功能成为java语言的反射机制。</p>

<h2>典型应用</h2>

<ul>
<li>spring生成Bean对象</li>
<li>struts2使用配置进行对象校验</li>
<li>hibernate,ibatis进行数据库对象映射</li>
<li>xml与java对象的相互转化</li>
<li>springmvc进行方法参数注入</li>
<li>more......</li>
</ul>


<h2>理解类型</h2>

<h3>原型类型vs包装类型(XXX.TYPE)</h3>

<p><div class="highlight"><pre><code class="java"><span class="n">Void</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="o">-&gt;</span> <span class="n">V</span>
<span class="n">Byte</span> <span class="o">-&gt;</span> <span class="kt">byte</span> <span class="o">-&gt;</span> <span class="n">B</span>
<span class="n">Character</span> <span class="o">-&gt;</span> <span class="kt">char</span> <span class="o">-&gt;</span> <span class="n">C</span>
<span class="n">Short</span> <span class="o">-&gt;</span> <span class="kt">short</span> <span class="o">-&gt;</span> <span class="n">S</span>
<span class="n">Integer</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="n">I</span>
<span class="n">Long</span> <span class="o">-&gt;</span> <span class="kt">long</span> <span class="o">-&gt;</span> <span class="n">J</span>
<span class="n">Float</span> <span class="o">-&gt;</span> <span class="kt">float</span> <span class="o">-&gt;</span> <span class="n">F</span>
<span class="n">Double</span> <span class="o">-&gt;</span> <span class="kt">double</span> <span class="o">-&gt;</span> <span class="n">D</span>
<span class="n">Boolean</span> <span class="o">-&gt;</span> <span class="kt">boolean</span> <span class="o">-&gt;</span> <span class="n">Z</span>
</code></pre></div></p>

<h3>类与接口</h3>

<ul>
<li>接口(Interface)是一种特殊的类</li>
<li>注解(Annotation)是一种特殊的接口</li>
<li>枚举(Enum)是一种特殊的类</li>
</ul>


<p><div class="highlight"><pre><code class="java"><span class="kd">class</span> <span class="nc">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="c1">//类</span>
<span class="kd">class</span> <span class="nc">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">AbstractList</span> <span class="c1">//抽象类</span>
<span class="kd">interface</span> <span class="nc">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Runnable</span> <span class="c1">//接口</span>
</code></pre></div></p>

<h3>数组类型</h3>

<p><div class="highlight"><pre><code class="java"><span class="c1">//基本类型数组</span>
<span class="kt">int</span><span class="o">[].</span><span class="na">class</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="n">I</span>
<span class="kt">int</span><span class="o">[][].</span><span class="na">class</span> <span class="o">-&gt;</span> <span class="o">[[</span><span class="n">I</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//普通类型数组</span>
<span class="n">String</span><span class="o">[].</span><span class="na">class</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="n">Ljava</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">;</span>
<span class="n">Integer</span><span class="o">[][].</span><span class="na">class</span> <span class="o">-&gt;</span> <span class="o">[[</span><span class="n">Ljava</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Integer</span><span class="o">;</span>
</code></pre></div></p>

<h2>理解类型判断方法</h2>

<p><div class="highlight"><pre><code class="java"><span class="c1">//是否某个类型的实例</span>
<span class="n">i</span> <span class="k">instanceof</span> <span class="n">Integer</span>
<span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isInstance</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
<span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isInstance</span><span class="o">(</span><span class="k">new</span> <span class="n">SuperTeacher</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//是否数组</span>
<span class="n">x</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">isArray</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//是否父子类/接口关系</span>
<span class="n">Number</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//是否原型类型</span>
<span class="n">i</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">isPrimitive</span><span class="o">()</span>
<span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isPrimitive</span><span class="o">()</span>
<span class="n">Integer</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">isPrimitive</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//是否注解</span>
<span class="n">Logger</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAnnotation</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//是否枚举</span>
<span class="n">Status</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isEnum</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//是否接口</span>
<span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isInterface</span><span class="o">()</span>
</code></pre></div></p>

<h2>理解修饰符</h2>

<ul>
<li>手段:Class#getModifiers()和Modifier工具类</li>
<li>适用于Class,Method,Field,Constructor</li>
</ul>


<p>示例代码如下:
<div class="highlight"><pre><code class="java"><span class="kt">int</span> <span class="n">mod</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">();</span>
<span class="n">assertTrue</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">isPublic</span><span class="o">(</span><span class="n">mod</span><span class="o">));</span>
</code></pre></div>
常见的修饰符判断方法有:
<div class="highlight"><pre><code class="java"><span class="c1">//可见性</span>
<span class="n">isPublic</span><span class="o">,</span><span class="n">isProtected</span><span class="o">,</span><span class="n">isPrivate</span>
<span class="c1">//类型属性相关</span>
<span class="n">isInterface</span><span class="o">,</span><span class="n">isAbstract</span><span class="o">,</span><span class="n">isFinal</span><span class="o">,</span><span class="n">isStatic</span>
<span class="c1">//特殊作用</span>
<span class="n">isSynchronized</span><span class="o">,</span><span class="n">isNative</span><span class="o">,</span><span class="n">isTransient</span><span class="o">,</span><span class="n">isVolatile</span>
</code></pre></div></p>

<h2>理解类型关系</h2>

<p><div class="highlight"><pre><code class="java"><span class="c1">//类-&gt;父类(单继承,只有一个)</span>
<span class="n">Class</span><span class="err">#</span><span class="n">getSuperclass</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//类、接口-&gt;实现接口(多继承,可能有多个)</span>
<span class="n">Class</span><span class="err">#</span><span class="n">getInterfaces</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//类-&gt;内部类(可能有多个)</span>
<span class="n">Class</span><span class="err">#</span><span class="n">getDeclaredClasses</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//内部类-&gt;外部类(只有一个)</span>
<span class="n">Class</span><span class="err">#</span><span class="n">getEnclosingClass</span><span class="o">()</span>
</code></pre></div></p>

<h3>相关练习</h3>

<ul>
<li>Test:输出某个类实现的所有接口</li>
<li>Test:输出某个类实现的继承结构</li>
<li>Test:能够获取到之类的信息么?</li>
</ul>


<h2>理解对象生成与调用</h2>

<h3>对象生成</h3>

<p>可以采用无参数构造方法或有参数方式
<div class="highlight"><pre><code class="java"><span class="c1">//需要存在无参构造方法</span>
<span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;com.xxx.Student&quot;</span><span class="o">;</span>
<span class="n">Class</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="n">Teacher</span> <span class="n">teacher</span> <span class="o">=</span> <span class="o">(</span><span class="n">Teacher</span><span class="o">)</span><span class="n">t</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//直接调用构造方法</span>
<span class="n">Constructor</span><span class="o">[]</span> <span class="n">cons</span> <span class="o">=</span> <span class="n">SuperTeacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getConstructors</span><span class="o">();</span>
<span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">cons</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">newInstance</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>
</code></pre></div></p>

<h3>获取成员</h3>

<p>成员一般指Field,Method,Constructor等信息
<div class="highlight"><pre><code class="java"><span class="c1">//属性</span>
<span class="n">Field</span><span class="o">[]</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">();</span>
<span class="n">Field</span><span class="o">[]</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span><span class="c1">//只有公有的&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//方法</span>
<span class="n">Medhod</span><span class="o">[]</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
<span class="n">Medhod</span><span class="o">[]</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getdMethods</span><span class="o">();</span><span class="c1">//只有公有的&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//构造方法</span>
<span class="n">Constructor</span><span class="o">[]</span> <span class="n">cs</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructors</span><span class="o">();</span>
<span class="n">Constructor</span><span class="o">[]</span> <span class="n">cs</span> <span class="o">=</span> <span class="n">Teacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getConstructors</span><span class="o">();</span><span class="c1">//只有公有的</span>
</code></pre></div></p>

<p>获取成员可以通过参数直接定位,以属性和方法为例:
<div class="highlight"><pre><code class="java"><span class="n">SuperTeacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SuperTeacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;setBounds&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">TYPE</span><span class="o">);</span><span class="c1">//参数是int</span>
<span class="n">SuperTeacher</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;setBounds&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span><span class="c1">//参数是Integer</span>
</code></pre></div></p>

<p>相关练习
* Test:找到某个类所有的非private的普通方法</p>

<h3>调用方式</h3>

<p>拿到成员之后，就可以进行调用了。像Field需要使用get/set方法，
Method使用invoke方法，Constructor使用newInstance方法。如：
<div class="highlight"><pre><code class="java"><span class="n">Field</span><span class="err">#</span><span class="n">set</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
<span class="n">Field</span><span class="err">#</span><span class="n">get</span><span class="o">(</span><span class="n">obj</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Method</span><span class="err">#</span><span class="n">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</code></pre></div></p>

<p>有时候需要绕过可见性进行调用，需要通过setAccessible方法进行处理，如
<div class="highlight"><pre><code class="java"><span class="n">Field</span><span class="err">#</span><span class="n">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span><span class="c1">// if not set, fail</span>
</code></pre></div></p>

<p>对于参数数组的话，通过args并不能区分是数组类型还是不定参数类型(都是通过数组进行传递)。
如果需要继续区别，应该对Method进行检测，检测方式是Method#isVarArgs</p>

<h3>处理返回值</h3>

<p>对于方法调用，可以对返回值进行处理。即使返回为void或数组类型也是可以识别的。如:
<div class="highlight"><pre><code class="java"><span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&gt;</span> <span class="n">returnType</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getReturnType</span><span class="o">();</span>
<span class="n">assertEquals</span><span class="o">(</span><span class="kt">void</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">returnType</span><span class="o">);</span>
<span class="n">assertTrue</span><span class="o">(</span><span class="n">returnType</span><span class="o">.</span><span class="na">isArray</span><span class="o">());</span>
</code></pre></div>
如果是数组的话，由于返回值是Object类型，需要通过Array工具类进行处理(见java api文档)</p>

<h3>其他:关于内部类调用的秘密</h3>

<h4>普通内部类</h4>

<p><div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">List</span> <span class="n">stus</span><span class="o">;</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">B</span><span class="o">().</span><span class="na">test</span><span class="o">();</span> <span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">stus</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">}</span>
<span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</code></pre></div>
关于上面的内部类，为什么B能够调用到A的stus属性，通过观察生成的字节码，得到的实际结果是:
<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">List</span> <span class="n">stus</span><span class="o">;</span>
<span class="kd">static</span> <span class="n">List</span> <span class="n">access$0</span><span class="o">(</span><span class="n">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="na">stus</span><span class="o">;</span> <span class="o">}</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">A$B</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">test</span><span class="o">();</span> <span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">A</span><span class="n">$B</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">A</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
<span class="n">A$B</span><span class="o">(</span><span class="n">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="n">$0</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span> <span class="o">}</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">A</span><span class="o">.</span><span class="na">access</span><span class="n">$0</span><span class="o">(</span><span class="k">this</span><span class="n">$0</span><span class="o">),</span><span class="n">size</span><span class="o">();</span> <span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</code></pre></div>
我们可以发现:</p>

<ol>
<li>A对B类需要访问的每一个私有属性生成对应的一个静态访问方法,B的访问就是通过这个私有方法的</li>
<li>生成B类实例的时候把A类实例引用传入并进行保存,所以每一个B类实例都有一个A类实例关联</li>
<li>通过反射可以看到新方法access$0和新内部变量this$0</li>
</ol>


<h4>静态内部类</h4>

<p><div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span> <span class="n">stus</span><span class="o">;</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">B</span><span class="o">().</span><span class="na">test</span><span class="o">();</span> <span class="o">}</span>
<span class="kd">static</span> <span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">stus</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">}</span>
<span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</code></pre></div>
对于静态内部类，情况就比较简单，得到的实际结果是:
<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span> <span class="n">stus</span><span class="o">;</span>
<span class="kd">static</span> <span class="n">List</span> <span class="n">access$0</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">stus</span><span class="o">;</span> <span class="o">}</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">A$B</span><span class="o">().</span><span class="na">test</span><span class="o">();</span> <span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">A</span><span class="n">$B</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">A$B</span><span class="o">()</span> <span class="o">{}</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">A</span><span class="o">.</span><span class="na">access</span><span class="n">$0</span><span class="o">(),</span><span class="n">size</span><span class="o">();</span> <span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</code></pre></div>
我们可以发现:</p>

<ol>
<li>A对B类需要访问的静态私有属性生成一个静态访问方法,B的访问就是通过这个私有方法的</li>
<li>由于是static方法，所以不需要保存实例的引用</li>
<li>通过反射可以看到新方法access$0</li>
</ol>


<p>所以，如果可以的话，优先使用静态内部类(特别是没有使用到内部普通变量的情况)。</p>

<h2>理解泛型</h2>

<p>java的泛型是擦除式,运行时没有泛型的概念.所以下面的代码会编译通过但执行报类型转换错误:
<div class="highlight"><pre><code class="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
<span class="n">add2List</span><span class="o">(</span><span class="n">strs</span><span class="o">);</span>
<span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">strs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//add2List的实现</span>
<span class="kt">void</span> <span class="nf">add2List</span><span class="o">(</span><span class="n">List</span> <span class="n">lt</span><span class="o">){&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">lt</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</code></pre></div></p>

<p>通过javap -c Test.class可以看到类似下面的指令:
<div class="highlight"><pre><code class="java"><span class="c1">// String str = strs.get(0);</span>
<span class="mi">7</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">31</span><span class="o">,</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">//interfaceMethod java/util/List.get:(l)Ljava/lang/Object;</span>
<span class="mi">12</span><span class="o">:</span> <span class="n">checkcast</span> <span class="err">#</span><span class="mi">37</span><span class="o">;</span> <span class="c1">//class java/lang/String&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// lt.add(1);</span>
<span class="mi">2</span><span class="o">:</span> <span class="n">invokestatic</span> <span class="err">#</span><span class="mi">41</span><span class="o">;</span> <span class="c1">//Method java/lang/Integer.valueOf:(l)Ljava/lang/Integer;</span>
<span class="mi">5</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">47</span><span class="o">,</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">//InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span>
</code></pre></div>
很明显，在checkcast的时候会出错。</p>

<p>虽然说运行时不关注是否泛型，但是还是有办法可以找到一些泛型相关信息的。和泛型类型的类图如下面所示：
<img src="/assets/images/java_types.png" alt="java泛型类型结构" /></p>

<p>下面以Method为例进行描述(关于field之类的就不描述了)：
<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="n">T</span> <span class="nf">method2</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">,</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&gt;</span> <span class="n">c</span><span class="o">,</span> <span class="kt">float</span><span class="o">[]</span> <span class="n">f</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span>
</code></pre></div></p>

<h3>分析入口</h3>

<p><div class="highlight"><pre><code class="java"><span class="n">Method</span><span class="err">#</span><span class="n">getGenericParameterTypes</span><span class="o">()</span>
<span class="n">Method</span><span class="err">#</span><span class="n">getGenericReturnType</span><span class="o">()</span>
<span class="n">Method</span><span class="err">#</span><span class="n">getGenericExceptionTypes</span><span class="o">()</span>
</code></pre></div></p>

<p>通过上面一些方法可以得到下面的类型关系：
<div class="highlight"><pre><code class="java"><span class="n">T</span> <span class="o">-&gt;</span> <span class="n">TypeVariable</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">-&gt;</span> <span class="n">ParameterizedType</span>
<span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&gt;</span> <span class="o">-&gt;</span> <span class="n">ParameterizedType</span>
<span class="kt">float</span><span class="o">[]</span> <span class="o">-&gt;</span> <span class="n">GenericArrayType</span>
<span class="n">Exception</span> <span class="o">-&gt;</span> <span class="n">Class</span>
</code></pre></div></p>

<p>ParameterizedType描述的是一种多级泛型的关系，可以继续通过getActualTypeArguments继续进行处理,可以得到
<div class="highlight"><pre><code class="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">-&gt;</span> <span class="n">Class</span>
<span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&gt;</span> <span class="o">-&gt;</span> <span class="n">WildcardType</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">-&gt;</span> <span class="n">TypeVariable</span>
</code></pre></div></p>

<p>处理Type是比较麻烦的事情，每种具体类型都有自己特殊的处理方法(见图所示)，但平时这个东西很少用到。</p>

<h2>New in JDK7</h2>

<p>jdk7以前有4种方法调用指令:
<div class="highlight"><pre><code class="java"><span class="n">invokestatic</span> <span class="o">-&gt;</span> <span class="err">静态方法调用</span>
<span class="n">invokespecial</span> <span class="o">-&gt;</span> <span class="err">特殊方法</span><span class="o">(</span><span class="err">如构造方法</span><span class="o">)</span><span class="err">调用</span>
<span class="n">invokevirtual</span> <span class="o">-&gt;</span> <span class="err">普通方法调用</span>
<span class="n">invokeinterface</span> <span class="o">-&gt;</span> <span class="err">接口方法调用</span>
</code></pre></div></p>

<p>在jdk7中实现了新的规范jsr292，增加了新的字节码指令invokedynamic,通过下面的选项可以开启。
<div class="highlight"><pre><code class="java"><span class="nl">XX:</span><span class="o">+</span><span class="n">UnlockExperimentalVMOptions</span>
<span class="nl">XX:</span><span class="o">+</span><span class="n">EnableInvokeDynamic</span>
<span class="nl">XX:</span><span class="o">+</span><span class="n">EnableMethodHandles</span>
</code></pre></div></p>

<p>该指令只需要制定方法名称，只要求引用非空对象而已，但javac还没法生成这样的指令。调用方式如下:
<div class="highlight"><pre><code class="java"><span class="n">invokedynamic</span> <span class="err">#</span><span class="mi">10</span><span class="o">;</span> <span class="c1">//DynamicMethod java/lang/Object.lessThan:(Ljava/lang/Object;)</span>
</code></pre></div></p>

<p>但是可以有相关的api可以模拟出这种指令调用方式，如下(看上去和普通反射调用没什么明显不同)：
<div class="highlight"><pre><code class="java"><span class="n">MethodType</span> <span class="n">type</span> <span class="o">=</span> <span class="n">MethodType</span><span class="o">.</span><span class="na">methodType</span><span class="o">(</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">MutableCallSite</span> <span class="n">callSite</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MutableCallSite</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
<span class="n">MethodHandle</span> <span class="n">invoker</span> <span class="o">=</span> <span class="n">callSite</span><span class="o">.</span><span class="na">dynamicInvoker</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">MethodHandles</span><span class="o">.</span><span class="na">Lookup</span> <span class="n">lookup</span> <span class="o">=</span> <span class="n">MethodHandles</span><span class="o">.</span><span class="na">lookup</span><span class="o">();</span>
<span class="n">MethodHandle</span> <span class="n">mhMax</span> <span class="o">=</span> <span class="n">lookup</span><span class="o">.</span><span class="na">findStatic</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;max&quot;</span><span class="o">,</span> <span class="n">type</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">callSite</span><span class="o">.</span><span class="na">setTarget</span><span class="o">(</span><span class="n">mhMax</span><span class="o">);</span>
<span class="n">invoker</span><span class="o">.</span><span class="na">invokeWithArguments</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
</code></pre></div></p>

<p>这种调用方式有几个关键的概念:
<div class="highlight"><pre><code class="java"><span class="n">method</span> <span class="n">handle</span> <span class="err">方法句柄，是</span><span class="n">callsite</span><span class="err">的目标</span>
<span class="n">bootstrap</span> <span class="n">method</span> <span class="err">引导方法</span>
<span class="n">CallSite</span> <span class="err">调用点</span>
<span class="n">method</span> <span class="n">type</span> <span class="err">方法类型</span>
</code></pre></div></p>

<p>这个指令可以增强很多基于JVM的动态语言的方法调用性能，所以潜力很大，更多具体信息，可以参考下面的一些链接:
* http://www.infoq.com/cn/news/2011/01/invokedynamic
* http://icyfenix.iteye.com/blog/1392441
* http://book.51cto.com/art/201205/339215.htm
* http://www.from0to1.net/%E5%86%8D%E6%8E%A2-invokedynamic/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命名风格培训草稿]]></title>
    <link href="http://mccxj.github.com/blog/20120814_naming-style.html"/>
    <updated>2012-08-14T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/naming-style</id>
    <content type="html"><![CDATA[<p>我记得郑大有次开课的时候，提到命名这个话题。说有次他跟一个前辈说：命名真的太难了。
前辈说：你终于开窍了。哪天咋们心里也有这个意识，也算是开窍了。(昨晚忘记说这个事了，补充)</p>

<h3>编码风格与编码规范</h3>

<p>风格是带主观色彩的，有个人爱好的区别。<br/>
规范是双刃剑，限制个人风格的随意发挥，让整体有个统一的风格。<br/>
规范是一些风格的最佳实践的集合，但仍然是不断进步的。</p>

<p>学习规范，应该从产生背景出发，理解规范背后希望解决的问题，才能更好理解规范，<strong>减少抵制情绪</strong>，或许还能改进规范。</p>

<h3>破窗效应与童子军军规</h3>

<p><strong>破窗效应</strong>: 一个房子如果窗户破了，没有人去修补，隔不久，其它的窗户也会莫名其妙地被人打破；
一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西；
一个很干净的地方，人们不好意思丢垃圾，但是一旦地上有垃圾出现之后，人就会毫不犹疑地抛，丝毫不觉羞愧。
(选择汽车为例子也可以)<br/>
<strong>童子军军规</strong>: 当你离开一个地方的时候，要让它比你来的时候更整洁干净。</p>

<p>遵守童子军军规，警惕破窗效应。<strong>避免对代码大范围进行修改</strong><br/>
对于老代码，总会出现<strong>新老风格冲突</strong>的情况，优化代码应该控制修改的范围和脚步，采用结对或评审的方式规避风险。<br/>
<strong>加强代码评审</strong>, 一个人出错的几率是5%,两个人在同个地方犯错的几率才0.25%。</p>

<h3>文件名规则</h3>

<p>遵循<strong>约定大于配置</strong>原则，像java文件名本身是和类名有关系的，对于页面文件和配置文件，同样在命名上要存在相关性。思考下面的问题:<br/>
<strong>如果你知道其中一个文件，如何找到相关的文件</strong></p>

<h3>包名规则</h3>

<p>包名规则本身就是有一套指导方针的：<br/>
以公司网址进行打头，如com.gmcc<br/>
通常会附带项目名,如com.gmcc.boss<br/>
项目大的话，还会继续模块化,如com.gmcc.boss.product<br/>
模块下面在继续分功能,从分层的角度，可以有com.gmcc.boss.product.action、service、dao、bean之类的包</p>

<p>对于通常的web应用，<strong>模块化划分也可以从菜单入手进行分解</strong>，至少可以作为参考。模块如果很大，可以再<strong>拆分子模块</strong>。</p>

<h3>常用命名法</h3>

<p>Camel命名 -- java标准命名法<br/>
匈牙利命名 -- MFC那套，变量名都带类型，如今有IDE智能提示，显得过时了。而且有货不对板的风险。<br/>
pascal命名 -- 和Camel就第一个单词首字母的区别<br/>
下划线命名 -- 在c代码、javascript、ruby等脚本中比较常见</p>

<h3>类名的选择</h3>

<p>主要从业务逻辑，框架要求，模式设计方面考虑:<br/>
业务逻辑中按分层命名规范即可 -- Action Controller Service Call Dao Business Bean等都是常用的后缀<br/>
框架基础类，参考接口命名 -- Filter Servlet Comparable <em>Utils </em>s<br/>
使用设计模式时参考常见命名 -- Adapter Chain Visitor Factory Builder</p>

<p>虽然整个代码结构使用分层方式，但还是有地方可以考虑设计模式的，切勿错失良机。<br/>
设计模式方面的内容参考<a href="http://book.douban.com/subject/1052241/">四人帮的书籍</a>,关于jdk的设计模式参考<a href="http://coolshell.cn/articles/3320.html">酷壳的文章</a></p>

<p><strong>对于业务系统，最好准备一份业务术语词典，用来指导相关业务功能的命名</strong></p>

<h3>方法命名</h3>

<p>评价标准：<strong>一句话功能描述</strong>。<br/>
通常选择动词加名词的组合，常用的动词并不多。
命名方式可能有所不同，取决于代码的关注点。(默念，参考评价标准)如:<br/>
getSubsByCertId -- 通过证件号获取用户信息,有强调证件号的意思<br/>
getSubs -- 获取用户信息，关注结果，可能支持多种方式</p>

<h3>变量命名</h3>

<p>对于临时变量，通常使用i,j,k,c,b等就可以了。不应该作为其他作用存在。<br/>
对于标记标识，选择done,found,success,ok,fail等，<strong>切勿使用flag</strong>, 评价标准(填空后读起来很顺畅):假如(找到了)...<br/>
对于状态，整理一些常用的常量以备使用，如:READY,SUCCESS,FAILED<br/>
对于常量，望文生义+注释(注释在这里显得很有必要)，修改checkstyle的魔鬼数字时，是<strong>学习命名的好机会</strong>。<br/>
对于普通变量，我们常常会带上类型如subsattrList,我觉得subsattrs这种单复数形式会更好。不过这是个习惯问题，不是什么大问题。
变量命名经验要多学习优秀开源代码，会有很多好处。有些变量名是由IDE通过方法名自动生成的，方法名恰当的时候，生成的变量名也是不错的。(总结)</p>

<p>命名技巧都差不多，我经常采用办法：<strong>在心里默念需要的功能，转换成方法名/变量名。反复默念几遍命名，看看是否能够像句子一样读出来。</strong></p>

<h3>注释</h3>

<p><strong>代码不能代替注释，但优先考虑代码的可读性</strong>，例如使用方法抽取等手段。<br/>
可读性的标准是<strong>代码可以像文章一样读出来</strong>,保证方法名和注释相符合，忌讳牛头不对马嘴。
坚持这种态度的话，代码质量一定会有所提高。</p>

<p>注释关注类注释和方法注释,方法内注释用于代码难以表达的地方(如某种特殊情况)。<br/>
对于外围接口(包括前后台调用),在方法注释中进行详细说明。</p>

<p>需求单号应该适当添加到代码中，我觉得类注释可能是比较合适的地方。<br/>
修改bug的代码通常比较烂(现网的是这样)，可以标注一下BUG单号等信息。<br/>
提交到版本库的日志要清晰，重点关注什么原因修改，修改哪些功能点等，<strong>争取让每次提交都有据可依(每次日志都是不一样的)</strong>。</p>
]]></content>
  </entry>
  
</feed>
