<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-12-01T18:36:13+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解RESTFul架构]]></title>
    <link href="http://mccxj.github.com/blog/20130530_introduce-to-rest.html"/>
    <updated>2013-05-30T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/introduce-to-rest</id>
    <content type="html"><![CDATA[<h2>1 什么是REST</h2>

<p>REST全称是Representational State Transfer，中文意思是表述性状态转移。
它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是 HTTP 规范的主要编写者之一。
他在论文中提到:“<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。</strong>”
如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p>

<p>REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力，
更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深，
但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。
所以我们这里描述的REST也是通过HTTP实现的REST。</p>

<h2>2 理解RestFul</h2>

<p>要理解RESTful架构，需要理解Representational State Transfer这个词组到底是什么意思，它的每一个词都有些什么涵义。
下面我们结合REST原则，围绕资源展开讨论，从资源的定义、获取、表述、关联、状态变迁等角度，列举一些关键概念并加以解释:</p>

<ul>
<li>资源与URI</li>
<li>统一资源接口</li>
<li>资源的表述</li>
<li>资源的链接</li>
<li>状态的转移</li>
</ul>


<h3>2.1 资源与URI</h3>

<p>REST全称是表述性状态转移，那究竟指的是什么的表述? 其实指的就是资源。<strong>任何事物，只要有被引用到的必要，它就是一个资源。资源可以是实体(例如手机号码)，也可以只是一个抽象概念(例如价值) </strong>。下面是一些资源的例子:</p>

<ul>
<li>某用户的手机号码</li>
<li>某用户的个人信息</li>
<li>最多用户订购的GPRS套餐</li>
<li>两个产品之间的依赖关系</li>
<li>某用户可以办理的优惠套餐</li>
<li>某手机号码的潜在价值</li>
</ul>


<p>要让一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)。
URI既可以看成是资源的地址，也可以看成是资源的名称。如果某些信息没有使用URI来表示，那它就不能算是一个资源，
只能算是资源的一些信息而已。<strong>URI的设计应该遵循可寻址性原则，具有自描述性，需要在形式上给人以直觉上的关联</strong>。这里以github网站为例，给出一些还算不错的URI：</p>

<ul>
<li>https://github.com/git</li>
<li>https://github.com/git/git</li>
<li>https://github.com/git/git/blob/master/block-sha1/sha1.h</li>
<li>https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08</li>
<li>https://github.com/git/git/pulls</li>
<li>https://github.com/git/git/pulls?state=closed</li>
<li>https://github.com/git/git/compare/master...next</li>
</ul>


<p>下面让我们来看看URI设计上的一些技巧:</p>

<ul>
<li>使用_或-来让URI可读性更好</li>
</ul>


<p>曾经Web上的URI都是冰冷的数字或者无意义的字符串，但现在越来越多的网站使用_或-来分隔一些单词，让URI看上去更为人性化。
例如国内比较出名的开源中国社区，它上面的新闻地址就采用这种风格，
如http://www.oschina.net/news/38119/oschina-translate-reward-plan。</p>

<ul>
<li>使用/来表示资源的层级关系</li>
</ul>


<p>例如上述/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08就表示了一个多级的资源，
指的是git用户的git项目的某次提交记录,又例如/orders/2012/10可以用来表示2012年10月的订单记录。</p>

<ul>
<li>使用?用来过滤资源</li>
</ul>


<p>很多人只是把?简单的当做是参数的传递，很容易造成URI过于复杂、难以理解。可以把?用于对资源的过滤，
例如/git/git/pulls用来表示git项目的所有推入请求，而/pulls?state=closed用来表示git项目中已经关闭的推入请求，
这种URL通常对应的是一些特定条件的查询结果或算法运算结果。</p>

<ul>
<li>,或;可以用来表示同级资源的关系</li>
</ul>


<p>有时候我们需要表示同级资源的关系时，可以使用,或;来进行分割。例如哪天github可以比较某个文件在随意两次提交记录之间的差异，
或许可以使用/git/git /block-sha1/sha1.h/compare/e3af72cdafab5993d18fae056f87e1d675913d08; bd63e61bdf38e872d5215c07b264dcc16e4febca作为URI。
不过，现在github是使用…来做这个事情的，例如/git/git/compare/master...next。</p>

<h3>2.2 统一资源接口</h3>

<p><strong>RESTFul架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问</strong>。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p>

<p><strong>如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性</strong>，例如GET和HEAD请求都是安全的，
无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次，
结果总是一样的，后面的请求并不会产生比第一次更多的影响。</p>

<p>下面列出了GET，DELETE，PUT和POST的典型用法:</p>

<h4>GET</h4>

<ul>
<li>安全且幂等</li>
<li>获取表示</li>
<li><p>变更时获取表示（缓存）</p></li>
<li><p>200（OK） - 表示已在响应中发出</p></li>
<li>204（无内容） - 资源有空表示</li>
<li>301（Moved Permanently） - 资源的URI已被更新</li>
<li>303（See Other） - 其他（如，负载均衡）</li>
<li>304（not modified）- 资源未更改（缓存）</li>
<li>400 （bad request）- 指代坏请求（如，参数错误）</li>
<li>404 （not found）- 资源不存在</li>
<li>406 （not acceptable）- 服务端不支持所需表示</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务端当前无法处理请求</li>
</ul>


<h4>POST</h4>

<ul>
<li>不安全且不幂等</li>
<li>使用服务端管理的（自动产生）的实例号创建资源</li>
<li>创建子资源</li>
<li>部分更新资源</li>
<li><p>如果没有被修改，则不过更新资源（乐观锁）</p></li>
<li><p>200（OK）- 如果现有资源已被更改</p></li>
<li>201（created）- 如果新资源被创建</li>
<li>202（accepted）- 已接受处理请求但尚未完成（异步处理）</li>
<li>301（Moved Permanently）- 资源的URI被更新</li>
<li>303（See Other）- 其他（如，负载均衡）</li>
<li>400（bad request）- 指代坏请求</li>
<li>404 （not found）- 资源不存在</li>
<li>406 （not acceptable）- 服务端不支持所需表示</li>
<li>409 （conflict）- 通用冲突</li>
<li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li>
<li>415 （unsupported media type）- 接受到的表示不受支持</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务当前无法处理请求</li>
</ul>


<h4>PUT</h4>

<ul>
<li>不安全但幂等</li>
<li>用客户端管理的实例号创建一个资源</li>
<li>通过替换的方式更新资源</li>
<li><p>如果未被修改，则更新资源（乐观锁）</p></li>
<li><p>200 （OK）- 如果已存在资源被更改</p></li>
<li>201 （created）- 如果新资源被创建</li>
<li>301（Moved Permanently）- 资源的URI已更改</li>
<li>303 （See Other）- 其他（如，负载均衡）</li>
<li>400 （bad request）- 指代坏请求</li>
<li>404 （not found）- 资源不存在</li>
<li>406 （not acceptable）- 服务端不支持所需表示</li>
<li>409 （conflict）- 通用冲突</li>
<li>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</li>
<li>415 （unsupported media type）- 接受到的表示不受支持</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务当前无法处理请求</li>
</ul>


<h4>DELETE</h4>

<ul>
<li>不安全但幂等</li>
<li><p>删除资源</p></li>
<li><p>200 （OK）- 资源已被删除</p></li>
<li>301 （Moved Permanently）- 资源的URI已更改</li>
<li>303 （See Other）- 其他，如负载均衡</li>
<li>400 （bad request）- 指代坏请求</li>
<li>404 （not found）- 资源不存在</li>
<li>409 （conflict）- 通用冲突</li>
<li>500 （internal server error）- 通用错误响应</li>
<li>503 （Service Unavailable）- 服务端当前无法处理请求</li>
</ul>


<p>下面我们来看一些实践中常见的问题:</p>

<ul>
<li>POST和PUT用于创建资源时有什么区别?</li>
</ul>


<p>POST和PUT在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。
例如为我的博文增加一个java的分类，生成的路径就是分类名/categories/java，那么就可以采用PUT方法。
不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTFul应用中就是这么做的。
我认为，这是因为rails默认使用服务端生成的ID作为URI的缘故，而不少人就是通过rails实践REST的，所以很容易造成这种误解。</p>

<ul>
<li>客户端不一定都支持这些HTTP方法吧?</li>
</ul>


<p>的确有这种情况，特别是一些比较古老的基于浏览器的客户端，只能支持GET和POST两种方法。
在实践上，客户端和服务端都可能需要做一些妥协。例如rails框架就支持通过隐藏参数_method=DELETE来传递真实的请求方法,
而像Backbone这样的客户端MVC框架则允许传递_method传输和设置X-HTTP-Method-Override头来规避这个问题。</p>

<ul>
<li>统一接口是否意味着不能扩展带特殊语义的方法?</li>
</ul>


<p>统一接口并不阻止你扩展方法，只要方法对资源的操作有着具体的、可识别的语义即可，并能够保持整个接口的统一性。
像WebDAV就对HTTP方法进行了扩展，增加了LOCK、UPLOCK等方法。而github的API则支持使用PATCH方法来进行issue的更新，例如:</p>

<p>PATCH /repos/:owner/:repo/issues/:number</p>

<p>不过，需要注意的是，像PATCH这种不是HTTP标准方法的，服务端需要考虑客户端是否能够支持的问题。</p>

<ul>
<li>统一资源接口对URI有什么指导意义?</li>
</ul>


<p>统一资源接口要求使用标准的HTTP方法对资源进行操作，所以URI只应该来表示资源的名称，而不应该包括资源的操作。
通俗来说，URI不应该使用动作来描述。例如，下面是一些不符合统一接口要求的URI:</p>

<ul>
<li>GET /getUser/1</li>
<li>POST /createUser</li>
<li>PUT /updateUser/1</li>
<li><p>DELETE /deleteUser/1</p></li>
<li><p>如果GET请求增加计数器，这是否违反安全性?</p></li>
</ul>


<p>安全性不代表请求不产生副作用，例如像很多API开发平台，都对请求流量做限制。像github，就会限制没有认证的请求每小时只能请求60次。
但客户端不是为了追求副作用而发出这些GET或HEAD请求的,产生副作用是服务端“自作主张”的。
另外，服务端在设计时，也不应该让副作用太大，因为客户端认为这些请求是不会产生副作用的。</p>

<ul>
<li>直接忽视缓存可取吗?</li>
</ul>


<p>即使你按各个动词的原本意图来使用它们，你仍可以轻易禁止缓存机制。
最简单的做法就是在你的HTTP响应里增加这样一个报头： Cache-control: no-cache。
但是，同时你也对失去了高效的缓存与再验证的支持(使用Etag等机制)。
对于客户端来说，在为一个REST式服务实现程序客户端时，也应该充分利用现有的缓存机制，以免每次都重新获取表示。</p>

<ul>
<li>响应代码的处理有必要吗?</li>
</ul>


<p>如上图所示，HTTP的响应代码可用于应付不同场合，正确使用这些状态代码意味着客户端与服务器可以在一个具备较丰富语义的层次上进行沟通。
例如，201（“Created”）响应代码表明已经创建了一个新的资源，其URI在Location响应报头里。
假如你不利用HTTP状态代码丰富的应用语义，那么你将错失提高重用性、增强互操作性和提升松耦合性的机会。
如果这些所谓的RESTFul应用必须通过响应实体才能给出错误信息，那么SOAP就是这样的了，它就能够满足了。</p>

<h3>2.3 资源的表述</h3>

<p>上面提到，客户端通过HTTP方法可以获取资源，是吧? 不，确切的说，客户端获取的只是资源的表述而已。
<strong>资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式,在客户端和服务端之间传送的也是资源的表述，而不是资源本身</strong>。
例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。
<strong>资源的表述包括数据和描述数据的元数据</strong>，例如，HTTP头“Content-Type” 就是这样一个元数据属性。</p>

<p>那么客户端如何知道服务端提供哪种表述形式呢?</p>

<p>答案是可以通过HTTP内容协商，客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。</p>

<p>以github为例，请求某组织资源的json格式的表述形式:</p>

<p><img src="/assets/images/2013/rest_1.jpg" alt="json格式" /></p>

<p>假如github也能够支持xml格式的表述格式，那么结果就是这样的:</p>

<p><img src="/assets/images/2013/rest_2.jpg" alt="xml格式" /></p>

<p>下面我们来看一些实践上常见的设计:</p>

<ul>
<li>在URI里边带上版本号</li>
</ul>


<p>有些API在URI里边带上版本号，例如:</p>

<ul>
<li>http://api.example.com/1.0/foo</li>
<li>http://api.example.com/1.2/foo</li>
<li>http://api.example.com/2.0/foo</li>
</ul>


<p>如果我们把版本号理解成资源的不同表述形式的话，就应该只是用一个URL，并通过Accept头部来区分，还是以github为例,它的Accept的完整格式是</p>

<p>application/vnd.github[.version].param[+json]</p>

<p>对于v3版本的话，就是Accept: application/vnd.github.v3。对于上面的例子，同理可以使用使用下面的头部:</p>

<ul>
<li>Accept: vnd.example-com.foo+json; version=1.0</li>
<li>Accept: vnd.example-com.foo+json; version=1.2</li>
<li><p>Accept: vnd.example-com.foo+json; version=2.0</p></li>
<li><p>使用URI后缀来区分表述格式</p></li>
</ul>


<p>像rails框架，就支持使用/users.xml或/users.json来区分不同的格式。
这样的方式对于客户端来说，无疑是更为直观，但混淆了资源的名称和资源的表述形式。
我个人认为，还是应该优先使用内容协商来区分表述格式。</p>

<ul>
<li>如何处理不支持的表述格式</li>
</ul>


<p>当服务器不支持所请求的表述格式，那么应该怎么办？若服务器不支持，它应该返回一个HTTP 406响应，表示拒绝处理该请求。下面以github为例，展示了一个请求XML表述资源的结果：</p>

<p><img src="/assets/images/2013/rest_3.jpg" alt="不支持的格式" /></p>

<h3>2.4 资源的链接</h3>

<p>我们知道REST是使用标准的HTTP方法来操作资源的，但仅仅因此就理解成带CURD的Web数据库架构就太过于简单了。
这种反模式忽略了一个核心概念: “<strong>超媒体即应用状态引擎（hypermedia as the engine of application state）</strong>”。
超媒体是什么? 当你浏览Web网页时，从一个连接跳到一个页面，再从另一个连接跳到另外一个页面，就是利用了超媒体的概念: 把一个个把资源链接起来.</p>

<p>要达到这个目的，就要求在表述格式里边加入链接来引导客户端。在《RESTFul Web Services》一书中，作者把这种具有链接的特性成为连通性。下面我们具体来看一些例子。</p>

<p>下面展示的是github获取某个组织下的项目列表的请求，可以看到在响应头里边增加Link头告诉客户端怎么访问下一页和最后一页的记录。
而在响应体里边，用url来链接项目所有者和项目地址。</p>

<p><img src="/assets/images/2013/rest_4.jpg" alt="用url来链接" /></p>

<p>又例如下面这个例子，创建订单后通过链接引导客户端如何去付款。</p>

<p><img src="/assets/images/2013/rest_5.jpg" alt="引导客户端" /></p>

<p>上面的例子展示了如何使用超媒体来增强资源的连通性。很多人在设计RESTFul架构时，使用很多时间来寻找漂亮的URI,而忽略了超媒体。所以，应该多花一些时间来给资源的表述提供链接，而不是专注于“资源的CRUD”。</p>

<h3>2.5 状态的转移</h3>

<p>有了上面的铺垫，再讨论REST里边的状态转移就会很容易理解了。
不过，我们先来讨论一下REST原则中的无状态通信原则。初看一下，好像自相矛盾了，既然无状态，何来状态转移一说?</p>

<p><strong>其实，这里说的无状态通信原则，并不是说客户端应用不能有状态，而是指服务端不应该保存客户端状态。</strong></p>

<h4>2.5.1 应用状态与资源状态</h4>

<p><strong>实际上，状态应该区分应用状态和资源状态，客户端负责维护应用状态，而服务端维护资源状态</strong>。
客户端与服务端的交互必须是无状态的，并在每一次请求中包含处理该请求所需的一切信息。
服务端不需要在请求间保留应用状态，只有在接受到实际请求的时候，服务端才会关注应用状态。
这种无状态通信原则，使得服务端和中介能够理解独立的请求和响应。
在多次请求中，同一客户端也不再需要依赖于同一服务器，方便实现高可扩展和高可用性的服务端。</p>

<p>但有时候我们会做出违反无状态通信原则的设计，例如利用Cookie跟踪某个服务端会话状态，常见的像J2EE里边的JSESSIONID。
这意味着，浏览器随各次请求发出去的Cookie是被用于构建会话状态的。
当然，如果Cookie保存的是一些服务器不依赖于会话状态即可验证的信息（比如认证令牌），这样的Cookie也是符合REST原则的。</p>

<h4>2.5.2 应用状态的转移</h4>

<p>状态转移到这里已经很好理解了，
<strong>“会话”状态不是作为资源状态保存在服务端的，而是被客户端作为应用状态进行跟踪的。客户端应用状态在服务端提供的超媒体的指引下发生变迁</strong>。服务端通过超媒体告诉客户端当前状态有哪些后续状态可以进入。
这些类似“下一页”之类的链接起的就是这种推进状态的作用--指引你如何从当前状态进入下一个可能的状态。</p>

<h2>3 总结</h2>

<p>现在广东XXX版本、XXX等项目中均使用传统的RPC、SOAP方式的Web服务，而移动南方基地XXXX项目的后台,
虽然采用了JSON格式进行交互，但还是属于RPC风格的。本文从资源的定义、获取、表述、关联、状态变迁等角度，
试图快速理解RESTFul架构背后的概念。RESTFul架构与传统的RPC、SOAP等方式在理念上有很大的不同，希望本文能对各位理解REST有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git分支让github page用上jekyll插件]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-plugin-with-git-branch.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-plugin-with-git-branch</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/jekyll-plugin-with-git-branch.png" alt="git分支让github page用上jekyll插件" /></p>

<p><strong>本博客已经在2013-3-9转换成octopress了,比这种手动方式要方便很多。</strong></p>

<p>github page是个不错的应用，可惜对jekyll有比较多的限制，特别是插件方面。
为了解决这个问题，我选择了分支来处理这个，大约就是source分支保存未编译的内容，
master分支保留生成的网站。下面是大概的操作过程，针对已有博客的迁移。</p>

<h3>迁移过程</h3>

<p>首先，到github上手动打一个分支出来，叫source分支。</p>

<p>接着，处理master分支，清除所有内容。注意git pull的功能是让本地可以识别到远程分支。
<strong>.nojekyll文件</strong>是让github page不启用jekyll生成网站，而是直接使用目录下的内容。
并把所有带下划线的目录都过滤掉。
<div class="highlight"><pre><code class="bash"><span class="nb">cd </span>mccxj.github.com
git rm -fr *&lt;/p&gt;

&lt;p&gt;touch .nojekyll
git add .nojekyll&lt;/p&gt;

&lt;h1&gt;add _&lt;em&gt;/&lt;/em&gt; to .gitignore&lt;/h1&gt;

&lt;p&gt;vi .gitignore&lt;/p&gt;

&lt;p&gt;git commit -a -m <span class="s2">&quot;remote all pages&quot;</span>
</code></pre></div></p>

<p>下面，继续处理source分支，其实基本保持不变就可以了，主要是生成网站内容。
<strong>带t的参数是让source跟踪远程source分支</strong>。我的jekyll是采用最新源码装的，命令参数有些变化，
请参考jekyll帮助，
<div class="highlight"><pre><code class="bash">git checkout -t origin/source&lt;/p&gt;

&lt;p&gt;<span class="nv">$ </span>git branch -a
  master
* <span class="nb">source</span>
<span class="nb">  </span>remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/source&lt;/p&gt;

&lt;h1&gt;generate page to _site&lt;/h1&gt;

&lt;p&gt;jekyll build
</code></pre></div></p>

<p>最后，切回master分支，并<strong>拷贝网站内容</strong>到根目录，然后把内容提交并push到远程即可。
<div class="highlight"><pre><code class="bash">git checkout master&lt;/p&gt;

&lt;p&gt;cp -r _site/* .&lt;/p&gt;

&lt;h1&gt;add <span class="k">then </span>commit&lt;/h1&gt;

&lt;p&gt;git add / git commit&lt;/p&gt;

&lt;h1&gt;push to remote branch&lt;/h1&gt;

&lt;p&gt;git push origin master
</code></pre></div></p>

<h3>新写作流程</h3>

<p>现在已经迁移完成了，下面介绍一些新写作流程。</p>

<p>首先，<strong>注意要在source分支上工作</strong>，在提交到远程之前都是一样。
<div class="highlight"><pre><code class="bash">git checkout <span class="nb">source</span>&lt;/p&gt;

&lt;h1&gt;rake post <span class="nv">title</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span>&lt;/h1&gt;

&lt;h1&gt;write something&lt;/h1&gt;

&lt;p&gt;git add xxxx.md
git commit -m <span class="s2">&quot;add new post&quot;</span>&lt;/p&gt;

&lt;h1&gt;jekyll build&lt;/h1&gt;

&lt;p&gt;jekyll serve
</code></pre></div></p>

<p>当你确认完成，并生成网站内容后，切换到master分支处理。
<strong>注意需要提交两个分支</strong>，例如使用git push可以同时提交两个分支。
<div class="highlight"><pre><code class="bash">git checkout master&lt;/p&gt;

&lt;p&gt;cp -r _site/* .&lt;/p&gt;

&lt;h1&gt;add <span class="k">then </span>commit&lt;/h1&gt;

&lt;p&gt;git add / git commit&lt;/p&gt;

&lt;h1&gt;push to remote branch&lt;/h1&gt;

&lt;p&gt;git push
</code></pre></div></p>

<p>还不算麻烦吧，其实我是尝试切换到<a href="http://octopress.org/">octopress</a>，发现有不少地方出现问题，才采用这种方式的。Enjoy It!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll插件:支持URL跳转]]></title>
    <link href="http://mccxj.github.com/blog/20130127_jekyll-alias-generator.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jekyll-alias-generator</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/jekyll-alias-generator.png" alt="jekyll插件:支持URL跳转" /></p>

<p>github page不支持.htaccess功能(参考<a href="http://rawsyntax.com/blog/blogging-on-jekyll-url-redirects/">Blogging on Jekyll: URL Redirects</a>)，
所以发生URL调整的时候，无法让原有路径自动跳转到新路径。
<a href="http://github.com/tsmango/jekyll_alias_generator">Alias generator</a>这个插件提供了一个解决方案，就是生成多一个页面，采用auto refresh的方式跳转到新路径。</p>

<p>这次我也调整了一些博客的路径，我也采用了这个方式。不过我只对当前已有的页面生成一次，以后的就不用这个插件了。
另外，我不想去修改每个页面的alias标签，所以我调整了代码，只对我的url规则进行处理。下面是我使用的版本。</p>

<p><div><script src='https://gist.github.com/4645990.js?file=alias_generator.rb'></script>
<noscript><pre><code># Alias Generator for Posts.
#
# Example:
#   alias /20121010_hello.html to /blog/20121010_hello.html
#   alias /hello.html to /pages/20121010_hello.html
#
# Place the full path of the alias (place to redirect from) inside the
# destination post's YAML Front Matter. One or more aliases may be given.
#
# Forked from Thomas Mango 's jekyll_alias_generator
# At http://github.com/tsmango/jekyll_alias_generator
# PLugin License: MIT

module Jekyll

  class AliasGenerator &lt; Generator

    def generate(site)
      @site = site

      process_posts
      process_pages
    end

    def process_posts
      # alias /20121010_hello.html to /blog/20121010_hello.html
      @site.posts.each do |post|
        generate_aliases(post.url, &quot;\/#{$1}&quot;) if /^\/blog\/(.+)$/ =~ post.url
      end
    end

    def process_pages
      # alias /hello.html to /pages/20121010_hello.html
      @site.pages.each do |page|
        dest = page.destination('')
        generate_aliases(dest, &quot;\/#{$1}&quot;)  if /^\/pages\/(.+)$/ =~ dest
      end
    end

    def generate_aliases(destination_path, aliases)
      alias_paths ||= Array.new
      alias_paths &lt;&lt; aliases
      alias_paths.compact!

      alias_paths.flatten.each do |alias_path|
        alias_path = alias_path.to_s

        alias_dir  = File.extname(alias_path).empty? ? alias_path : File.dirname(alias_path)
        alias_file = File.extname(alias_path).empty? ? &quot;index.html&quot; : File.basename(alias_path)
        fs_path_to_dir   = File.join(@site.dest, alias_dir)
        alias_index_path = File.join(alias_dir, alias_file)

        FileUtils.mkdir_p(fs_path_to_dir)

        File.open(File.join(fs_path_to_dir, alias_file), 'w') do |file|
          file.write(alias_template(destination_path))
        end

        (alias_index_path.split('/').size + 1).times do |sections|
          @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_index_path.split('/')[0, sections].join('/'), nil)
        end
      end
    end

    def alias_template(destination_path)
      &lt;&lt;-EOF
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
      &lt;head&gt;
      &lt;link rel=&quot;canonical&quot; href=&quot;#{destination_path}&quot;/&gt;
      &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=#{destination_path}&quot; /&gt;
      &lt;/head&gt;
      &lt;/html&gt;
      EOF
    end
  end

  class AliasFile &lt; StaticFile
    require 'set'

    def destination(dest)
      File.join(dest, @dir)
    end

    def modified?
      return false
    end

    def write(dest)
      return true
    end
  end
end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll插件:嵌入github gist]]></title>
    <link href="http://mccxj.github.com/blog/20130127_gist-tag-blog.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/gist-tag-blog</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/gist-tag-blog.png" alt="jekyll插件:嵌入github gist" /></p>

<p>gist是gtihub的一个代码块功能，用来粘贴一些比较长的代码还是挺有用的。
github page可以直接嵌入gist，并且能显示高亮。
不过我不想太依赖gist，所以<strong>修改成使用pygments高亮的方式</strong>。
看看下面gist_tag.rb这个插件的效果:</p>

<p><div><script src='https://gist.github.com/4648237.js?file=gist_tag.rb'></script>
<noscript><pre><code>require 'cgi'
require 'digest/md5'
require 'net/https'
require 'uri'

module Jekyll
  class GistTag &lt; Liquid::Tag
    include Liquid::StandardFilters
    def initialize(tag_name, text, token)
      super
      @text           = text
      @options        = {:encoding =&gt; &quot;utf-8&quot;}
      @cache_disabled = false
      @cache_folder   = File.expand_path &quot;../_gist_cache&quot;, File.dirname(__FILE__)
      FileUtils.mkdir_p @cache_folder
    end

    def render(context)
      if parts = @text.match(/([\d]*) lang=(.+) (.*)/)
        gist, @lang, file = parts[1].strip, parts[2].strip, parts[3].strip
        script_url = script_url_for gist, file
        code       = get_cached_gist(gist, file) || get_gist_from_web(gist, file)

        context.registers[:site].pygments
        html_output_for context, script_url, code
      else
        &quot;&quot;
      end
    end

    def html_output_for(context, script_url, code)
      if context.registers[:site].pygments
        output = add_code_tags(Pygments.highlight(code, :lexer =&gt; @lang, :options =&gt; @options))
      else
        render_codehighlighter(code)
      end
    end

    def add_code_tags(code)
      # Add nested &lt;code&gt; tags to code blocks
      code = code.sub(/&lt;pre&gt;/,'&lt;pre&gt;&lt;code class=&quot;#{@lang}&quot;&gt;')
      code = code.sub(/&lt;\/pre&gt;/,&quot;&lt;/code&gt;&lt;/pre&gt;&quot;)
    end

    def render_codehighlighter(code)
      #The div is required because RDiscount blows ass
      &lt;&lt;-HTML
&lt;div&gt;
  &lt;pre&gt;&lt;code class='#{@lang}'&gt;#{h(code).strip}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
      HTML
    end

    def script_url_for(gist_id, filename)
      &quot;https://gist.github.com/#{gist_id}.js?file=#{filename}&quot;
    end

    def get_gist_url_for(gist, file)
      &quot;https://raw.github.com/gist/#{gist}/#{file}&quot;
    end

    def cache(gist, file, data)
      cache_file = get_cache_file_for gist, file
      File.open(cache_file, &quot;w&quot;) do |io|
        io.write data
      end
    end

    def get_cached_gist(gist, file)
      return nil if @cache_disabled
      cache_file = get_cache_file_for gist, file
      File.read cache_file if File.exist? cache_file
    end

    def get_cache_file_for(gist, file)
      bad_chars = /[^a-zA-Z0-9\-_.]/
      gist      = gist.gsub bad_chars, ''
      file      = file.gsub bad_chars, ''
      md5       = Digest::MD5.hexdigest &quot;#{gist}-#{file}&quot;
      File.join @cache_folder, &quot;#{gist}-#{file}-#{md5}.cache&quot;
    end

    def get_gist_from_web(gist, file)
      gist_url          = get_gist_url_for gist, file
      raw_uri           = URI.parse gist_url
      https             = Net::HTTP.new raw_uri.host, raw_uri.port
      https.use_ssl     = true
      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
      request           = Net::HTTP::Get.new raw_uri.request_uri
      data              = https.request request
      data              = data.body
      cache gist, file, data unless @cache_disabled
      data
    end
  end

  class GistTagNoCache &lt; GistTag
    def initialize(tag_name, text, token)
      super
      @cache_disabled = true
    end
  end
end

Liquid::Template.register_tag('gist', Jekyll::GistTag)
Liquid::Template.register_tag('gistnocache', Jekyll::GistTagNoCache)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抢票插件搞得上github page都要轻功]]></title>
    <link href="http://mccxj.github.com/blog/20130120_github-across-gfw.html"/>
    <updated>2013-01-20T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/github-across-gfw</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/2013/acrossgfw.jpg" alt="抢票插件搞得上github page都要轻功" /></p>

<p>春运临近，浏览器抢票软件也变得流行，没回来那几天就看到新闻说:<a href="http://www.oschina.net/news/36770/12306_ticket_helper">12306 抢票版插件拖垮 Github 服务器</a>
，没想到回来之后就发现github page不能用了，正确的说应该是github的子域名都不能用了，看来是贴倒部和宫刑部的新春贺礼来的。</p>

<h2>抢票插件和github什么关系</h2>

<p>抢票插件引用了github上的一个js文件，但github有个安全检测，当访问比较频繁的时候就会直接返回403 forbidden。
然后作者没多想就在插件里加了个重试机制。如果返回的是403就每5秒重试一次，并且是永久重试，结果github认为你访问的更频繁了于是一直返回403。
可想而知这就成了死循环，使用插件的用户一多，对github而言就产生DDOS了。
换句话说，这是github的一种安全机制而已，抢票插件和github基本没什么关系，有关部门的做法更是弱智得不行呀。:)</p>

<h2>轻功之ssh</h2>

<p>以前用过free gate这种东西，不过不大稳定，而且感觉风险比较高。呵呵，你懂的。<br/>
<a href="http://www.ssh110.com/help.html">ssh使用帮助</a>,跟人感觉用ssh命令行配合chrome插件是最方便的。<br/>
<a href="http://blog.onlybird.com/%E5%85%8D%E8%B4%B9ssh%E4%BB%A3%E7%90%86">免费ssh代理</a>,速度还不错，不过不是特别稳定。<br/>
<a href="http://wendal.net/2013/0108.html">Nutz福利之轻功</a>,应该不错,不过我还没用上。</p>
]]></content>
  </entry>
  
</feed>
