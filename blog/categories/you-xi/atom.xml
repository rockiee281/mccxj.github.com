<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 游戏 | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/you-xi/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2013-11-08T22:23:51+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一笔画游戏]]></title>
    <link href="http://mccxj.github.com/blog/20120709_one-line-drawing-game.html"/>
    <updated>2012-07-09T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/one-line-drawing-game</id>
    <content type="html"><![CDATA[<p>在android上看过一个一笔画的小游戏，规则很简单，要连续一笔，不能重复。
当然，到后面比较难的时候还会限制方向，有些线路必须走多次等等。并不是觉得这有游戏做得多么的好，或者很有创意。
我只是从程序员的角度来看问题，用程序是怎么处理的。
我们只需要尝试所有可能的路径就可以了，这里用了回朔法，是一种优化过的穷举，</p>

<p>先来考虑一下数据结构。我们给所有的点加上编号1-n，所有的连线可以用二维数组表示a[n+1][n+1]，值为0表示不可联通，
其他表示需要经过的次数(我实现的时候是采用类似稀疏矩阵的链表表示)。<br/>
至于给矩阵增加多一列，主要是考虑处理方便，还考虑到起始点不好确定，所以加个虚拟点，<br/>
同时增加虚拟点到其他n个点的连接，这样我们深度遍历的时候从虚拟点开始就可以了。<br/>
另外我们需要一个链表来存放走过的路径，还需要一个标记来表示找到路径，无需继续尝试。</p>

<p>初始化的伪代码如下，
<div class="highlight"><pre><code class="ruby"><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">k</span><span class="o">]=</span><span class="mi">1</span> <span class="k">end</span> <span class="c1">#虚拟点</span>
<span class="vi">@path</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># 走过的路径</span>
<span class="vi">@ok</span><span class="o">=</span><span class="kp">false</span> <span class="c1"># 标记是否完成</span>
</code></pre></div></p>

<p>接下去我们需要一个回溯算法(参考<a href="20120710_sudoku.html">数独(sudoku)游戏</a>)，代码比较简单，这里就不展示代码示例了。</p>

<p>需要注意的是，找到一个可走的路径时(例如从i到j,a[i][j]>0)，深度遍历的时候需要对这个值减1，回溯的时候加1就可以了。
而对于走过的路径path，是否需要回退呢? 其实我们关心的是把刚刚走过的路径加入路径的正确位置，
如果选择数组的话，在回溯的时候就不可以不回退了，而对于链表，回退则是必要的。</p>

<p>总体来说，这个游戏的实现是比较简单的，有兴趣的同学可以自己实现一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[量杯倒水游戏]]></title>
    <link href="http://mccxj.github.com/blog/20120706_the-cup-game.html"/>
    <updated>2012-07-06T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/the-cup-game</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/the_cup_game.jpg" alt="量杯倒水" /></p>

<h2>量杯倒水</h2>

<p>这个问题常见于趣味题和面试题，题意大概是这样的:有两个只有最大刻度的量杯(如10毫升，3毫升)，
并且有无限量的水。求怎么倒出x毫升的水?</p>

<h2>思路与猜想</h2>

<p>首先我们来操作一下，例如倒出4毫升的水,同时把大小量杯表示为a,b</p>

<ol>
<li>b装满，倒入a(a有3ml,b有0ml)</li>
<li>b再装满，倒入a(a有6ml,b有0ml)</li>
<li>b再装满，倒入a(a有9ml,b有0ml)</li>
<li>b再装满，倒入a(a有10ml,b有2ml)</li>
<li>a倒掉，b倒入a(a有2ml,b有0ml)</li>
<li>重复2-4的动作(此时a有10ml,b有1ml)</li>
<li>a倒掉，b倒入a(a有1ml,b有0ml)</li>
<li>b装满，倒入a(a有4ml,b有0ml)</li>
</ol>


<p>假如我们再继续操作的话，还可以找到7ml,这样0ml~10ml的体积都是可以测量出来的。这是不是一般规律?</p>

<p>虽然我们进行了许多次操作，但操作是有规律的:b总是往a倒水直到a装满，这时b会剩余一点。
这样才能得到不同于a,b的体积。我们重复这个操作的过程，不考虑a装满的情况，
在a中出现的水t可以用t=mb-na来表示(a>t>=0,m>=0,n>=0)。其中m可以表示为往a倒水的次数，
n表示a装满的次数。</p>

<p>首先考虑一下a,b不是互质的情况，假设他们的最大公约数为u,那么狠显然没法倒出t小于u的体积。
这种情况可以归结为两边除去u的情况。</p>

<p>现在再来考虑a,b互质的情况，我们需要考虑的是，对于t，是否都存在m,n使t=mb-na成立？</p>

<h2>贝祖定理</h2>

<p>我们从数学归纳法出发，很明显t=0的情况是满足要求的，假设t=1的要求也能够满足，
那么有t=mb-na成立就可以推导出t+1=m1<em>b-n1</em>a+m2<em>b-n2</em>a也是符合mb-na的。</p>

<p>如何证明存在m,n使得mb-na=1?这个倒不用自己动手，有个叫<a href="http://zh.wikipedia.org/wiki/%E8%B4%9D%E7%A5%96%E7%AD%89%E5%BC%8F">贝祖定理</a>的数学定理，可以很容易推导出这个结论。</p>

<p>从wiki上看到的资料，贝祖定理可以证明a,b互质，存在xa+yb=1，其中x,y为整数
不过好像跟我们的要求有点出入。不过没关系，很显然x,y如果没有不等于0的话，必须有个是负数，</p>

<p>如果x是负数，显然符合要求，如果y是负数，那么总存在一个数k(k>0)使得y+ka>0,那么
1=xa+yb=xa+yb-kab+kab=(x-ka)a+(y+ka)b,这样也是可以符合要求的。</p>

<p>所以，按照我们的操作方式，假设a,b的最大公约数为u,就可以找到0ml,uml,2uml...aml的体积。</p>

<h2>再思考</h2>

<p>如果有多个量杯，情况会是怎样?</p>

<p>要倒出一定量的水，上述操作是否是最快的?</p>
]]></content>
  </entry>
  
</feed>
